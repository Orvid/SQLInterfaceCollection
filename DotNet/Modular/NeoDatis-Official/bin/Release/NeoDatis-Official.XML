<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NeoDatis-Official</name>
    </assembly>
    <members>
        <member name="T:NeoDatis.Btree.AbstractBTreeIterator`1">
            <author>olivier</author>
        </member>
        <member name="F:NeoDatis.Btree.AbstractBTreeIterator`1.currentNode">
            <summary>The current node where the iterator is</summary>
        </member>
        <member name="F:NeoDatis.Btree.AbstractBTreeIterator`1.currentKeyIndex">
            <summary>The current key in the current node where the iterator is</summary>
        </member>
        <member name="F:NeoDatis.Btree.AbstractBTreeIterator`1.nbReturnedKeys">
            <summary>The number of returned keys</summary>
        </member>
        <member name="F:NeoDatis.Btree.AbstractBTreeIterator`1.nbReturnedElements">
            <summary>
            The number of returned elements ; it may be different from the number of
            keys in the case f multileValues btree where a key can contain more than
            one value
            </summary>
        </member>
        <member name="T:NeoDatis.Btree.BTreeError">
            <summary>ODB BTree Errors All @ in error description will be replaced by parameters
            	</summary>
            <author>olivier s</author>
        </member>
        <member name="M:NeoDatis.Btree.BTreeError.ToString">
            <summary>replace the @1,@2,...</summary>
            <remarks>replace the @1,@2,... by their real values.</remarks>
        </member>
        <member name="T:NeoDatis.Btree.BTreeIteratorMultipleValuesPerKey`1">
            <summary>
            An iterator to iterate over NeoDatis BTree that accept more than one value
            per key.
            </summary>
            <remarks>
            An iterator to iterate over NeoDatis BTree that accept more than one value
            per key. This is used for non unique index and collection that return ordered
            by results
            </remarks>
            <author>olivier</author>
        </member>
        <member name="M:NeoDatis.Btree.BTreeIteratorMultipleValuesPerKey`1.#ctor(NeoDatis.Btree.IBTree,NeoDatis.Odb.Core.OrderByConstants)">
            <param name="tree"></param>
            <param name="orderByType"></param>
        </member>
        <member name="F:NeoDatis.Btree.BTreeIteratorMultipleValuesPerKey`1.currenListIndex">
            <summary>
            The index in the list of the current value, Here values of a key are
            lists!
            </summary>
        </member>
        <member name="F:NeoDatis.Btree.BTreeIteratorMultipleValuesPerKey`1.currentValue">
            <summary>The current value(List) of the current key being read.</summary>
            <remarks>The current value(List) of the current key being read.</remarks>
        </member>
        <member name="T:NeoDatis.Btree.BTreeIteratorSingleValuePerKey`1">
            <summary>An iterator to iterate over NeoDatis BTree.</summary>
            <remarks>An iterator to iterate over NeoDatis BTree.</remarks>
            <author>olivier</author>
        </member>
        <member name="T:NeoDatis.Btree.IBTreeNode">
            <summary>The interface for btree node.</summary>
            <remarks>The interface for btree node.</remarks>
            <author>olivier</author>
        </member>
        <member name="M:NeoDatis.Btree.IBTreeNode.GetPositionOfKey(System.IComparable)">
            <summary>Returns the position of the key.</summary>
            <remarks>
            Returns the position of the key. If the key does not exist in node,
            returns the position where this key should be,multiplied by -1
            <pre>
            or example for node of degree 3 : [1 89 452 789 - ],
            calling getPositionOfKey(89) returns 2 (starts with 1)
            calling getPositionOfKey(99) returns -2 (starts with 1),because the position should be done, but it does not exist so multiply by -1
            his is used to know the child we should descend to!in this case the getChild(2).
            </pre>
            </remarks>
            <param name="key"></param>
            <returns>
            The position of the key,as a negative number if key does not
            exist, warning, the position starts with 1and not 0!
            </returns>
        </member>
        <member name="T:NeoDatis.Btree.IBTreeNodeMultipleValuesPerKey">
            <summary>The interface for btree nodes that accept One Value Per Key</summary>
            <author>olivier</author>
        </member>
        <member name="T:NeoDatis.Btree.IBTreeNodeOneValuePerKey">
            <summary>The interface for btree nodes that accept multiple values for each key</summary>
            <author>olivier</author>
        </member>
        <member name="T:NeoDatis.Btree.IBTreePersister">
            <summary>
            Interface used to persist and load btree and btree node from a persistent
            layer
            </summary>
            <author>osmadja</author>
        </member>
        <member name="M:NeoDatis.Btree.IBTreePersister.Close">
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="T:NeoDatis.Btree.IKeyAndValue">
            <author>olivier</author>
        </member>
        <member name="M:NeoDatis.Btree.Impl.AbstractBTree.Delete(System.IComparable,System.Object)">
            <summary>TODO Manage collision</summary>
        </member>
        <member name="M:NeoDatis.Btree.Impl.AbstractBTree.InternalDelete(NeoDatis.Btree.IBTreeNode,NeoDatis.Btree.IKeyAndValue)">
            <summary>Returns the value of the deleted key</summary>
            <param name="node"></param>
            <param name="keyAndValue"></param>
            <returns></returns>
            <exception cref="T:System.Exception">System.Exception</exception>
        </member>
        <member name="M:NeoDatis.Btree.Impl.AbstractBTree.Split(NeoDatis.Btree.IBTreeNode,NeoDatis.Btree.IBTreeNode,System.Int32)">
            <summary>
            <pre>
            1 take median element
            2 insert the median in the parent  (shifting necessary elements)
            3 create a new node with right part elements (moving keys and values and children)
            4 set this new node as a child of parent
            </pre>
            </summary>
        </member>
        <member name="F:NeoDatis.Btree.Impl.AbstractBTreeNode.btree">
            <summary>The BTree owner of this node</summary>
        </member>
        <member name="M:NeoDatis.Btree.Impl.AbstractBTreeNode.ExtractRightPart">
            <summary>Creates a new node with the right part of this node.</summary>
            <remarks>
            Creates a new node with the right part of this node. This should only be
            called on a full node
            </remarks>
        </member>
        <member name="M:NeoDatis.Btree.Impl.AbstractBTreeNode.GetPositionOfKey(System.IComparable)">
            <summary>Returns the position of the key.</summary>
            <remarks>
            Returns the position of the key. If the key does not exist in node,
            returns the position where this key should be,multiplied by -1
            <pre>
            for example for node of degree 3 : [1 89 452 789 - ],
            calling getPositionOfKey(89) returns 2 (starts with 1)
            calling getPositionOfKey(99) returns -2 (starts with 1),because the position should be done, but it does not exist so multiply by -1
            this is used to know the child we should descend to!in this case the getChild(2).
            </pre>
            </remarks>
            <param name="key"></param>
            <returns>
            The position of the key,as a negative number if key does not
            exist, warning, the position starts with 1and not 0!
            </returns>
        </member>
        <member name="M:NeoDatis.Btree.Impl.AbstractBTreeNode.MergeWith(NeoDatis.Btree.IBTreeNode)">
            <summary>
            Can only merge node without intersection =&gt; the greater key of this must
            be smaller than the smallest key of the node
            </summary>
        </member>
        <member name="T:NeoDatis.Btree.Impl.InMemoryPersister">
            <summary>TODO check if this class must exist</summary>
            <author>osmadja</author>
        </member>
        <member name="M:NeoDatis.Btree.Impl.InMemoryPersister.Close">
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:NeoDatis.Btree.Impl.Multiplevalue.BTreeNodeMultipleValuesPerKey.ManageCollectionValue(System.Int32,System.Object)">
            <param name="realPosition"></param>
            <param name="value"></param>
        </member>
        <member name="T:NeoDatis.Btree.Tool.BTreeDisplay">
            <summary>an utility to display a btree</summary>
            <author>osmadja</author>
        </member>
        <member name="T:NeoDatis.Tool.DLogger">
            <summary>
            Simple logging class
            <p>
            </p>
            </summary>
        </member>
        <member name="M:NeoDatis.Tool.DLogger.Error(System.Object)">
            <param name="@object">The object to be logged</param>
        </member>
        <member name="T:NeoDatis.Tool.IOUtil">
            <summary>Delete file function</summary>
            <author>osmadja</author>
        </member>
        <member name="T:NeoDatis.Tool.Mutex.Mutex">
            <summary>A Simple Mutex for lock operations</summary>
            <author>osmadja</author>
        </member>
        <member name="F:NeoDatis.Tool.Mutex.Mutex.name">
            <summary>The name of the mutex</summary>
        </member>
        <member name="F:NeoDatis.Tool.Mutex.Mutex.inUse">
            <summary>The lock status *</summary>
        </member>
        <member name="M:NeoDatis.Tool.Mutex.Mutex.Acquire(System.String)">
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:NeoDatis.Tool.Mutex.Mutex.Attempt(System.Int64)">
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="T:NeoDatis.Tool.Mutex.MutexFactory">
            <summary>A mutex factory</summary>
            <author>osmadja</author>
        </member>
        <member name="M:NeoDatis.Tool.Wrappers.IO.MessageStreamerBuilder.GetMessageStreamer(System.String,System.Int32,System.String)">
            
        </member>
        <member name="F:NeoDatis.Tool.Wrappers.IO.MultiBufferVO.numberOfBuffers">
            <summary> The number of buffers///</summary>
        </member>
        <member name="F:NeoDatis.Tool.Wrappers.IO.MultiBufferVO.bufferSize">
            <summary> The buffer size///</summary>
        </member>
        <member name="F:NeoDatis.Tool.Wrappers.IO.MultiBufferVO.bufferStartPosition">
            <summary> The current start position of the buffer ///</summary>
        </member>
        <member name="F:NeoDatis.Tool.Wrappers.IO.MultiBufferVO.bufferEndPosition">
            <summary> The current end position of the buffer ///</summary>
        </member>
        <member name="F:NeoDatis.Tool.Wrappers.IO.MultiBufferVO.maxPositionInBuffer">
            <summary>
             The max position in the buffer, used to optimize the flush - to flush
             only new data and not all the buffer
            </summary>
        </member>
        <member name="F:NeoDatis.Tool.Wrappers.IO.MultiBufferVO.bufferHasBeenUsedForWrite">
            <summary> To know if buffer has been used for write - to speedup flush ///</summary>
        </member>
        <member name="M:NeoDatis.Tool.Wrappers.IO.MultiBufferVO.ClearBuffer(System.Int32)">
            <summary>
             @param i
            </summary>
        </member>
        <member name="M:NeoDatis.Tool.Wrappers.IO.MultiBufferVO.SetByte(System.Int32,System.Int32,System.Byte)">
            <summary>
             @param bufferIndex
             @param positionInBuffer
             @param b
            </summary>
        </member>
        <member name="M:NeoDatis.Tool.Wrappers.IO.MultiBufferVO.SetCreationDate(System.Int32,System.Int64)">
            <summary>
             @param bufferIndex
             @param currentTimeInMs
            </summary>
        </member>
        <member name="M:NeoDatis.Tool.Wrappers.IO.MultiBufferVO.SetPositions(System.Int32,System.Int64,System.Int64,System.Int32)">
            <summary>
             @param bufferIndex
             @param newPosition
             @param endPosition
             @param i
            </summary>
        </member>
        <member name="M:NeoDatis.Tool.Wrappers.IO.MultiBufferVO.WriteBytes(System.Int32,System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
             @param bufferIndex
             @param bytes
             @param startIndex
             @param i
             @param lengthToCopy
            </summary>
        </member>
        <member name="M:NeoDatis.Tool.Wrappers.IO.MultiBufferVO.HasBeenUsedForWrite(System.Int32)">
            <summary>
             @param bufferIndex
             @return
            </summary>
        </member>
        <member name="M:NeoDatis.Tool.Wrappers.IO.MultiBufferVO.Clear">
            <summary>
             
            </summary>
        </member>
        <member name="M:NeoDatis.Tool.Wrappers.IO.MultiBufferVO.GetCreationDate(System.Int32)">
            <summary>
             @param i
             @return
            </summary>
        </member>
        <member name="T:NeoDatis.Odb.Core.Layers.Layer3.IO">
            <summary>The basic IO interface for basic IO operation like reading and writing bytes
            	</summary>
            <author>olivier</author>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer3.IO.Init(System.String,System.Boolean,System.String)">
            <exception cref="!:Java.IO.FileNotFoundException"></exception>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer3.IO.Seek(System.Int64)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer3.IO.Close">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer3.IO.Write(System.Byte)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer3.IO.Write(System.Byte[],System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer3.IO.Read(System.Byte[],System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer3.IO.Read">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer3.IO.Length">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer3.IO.LockFile">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer3.IO.UnlockFile">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer3.IO.IsLocked">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="T:NeoDatis.Tool.Wrappers.List.IOdbList`1">
            <author>olivier</author>
        </member>
        <member name="T:NeoDatis.Tool.Wrappers.NeoDatisNumber">
            To Wrap some basic number functions
             @author olivier
            warning the round type is not used
        </member>
        <member name="T:NeoDatis.Tool.Wrappers.OdbArray">
             @author olivier
            
        </member>
        <member name="T:NeoDatis.Tool.Wrappers.OdbClassUtil">
             @author olivier
            
        </member>
        <member name="T:NeoDatis.Tool.Wrappers.OdbComparable">
            <summary>o wrapper to the native Comparable interface</summary>
            <author>olivier</author>
        </member>
        <member name="T:NeoDatis.Tool.Wrappers.OdbDateFormat">
            To Wrap SimpleDatFormat
             @author olivier
            @port.todo
        </member>
        <member name="T:NeoDatis.Tool.Wrappers.OdbString">
             @sharpen.ignore
             @author olivier
            
        </member>
        <member name="M:NeoDatis.Tool.Wrappers.OdbString.ReplaceToken(System.String,System.String,System.String)">
            <summary>Replace a string within a string</summary>
            <param name="in_sSourceString">The String to modify
            </param>
            <param name="in_sTokenToReplace">The Token to replace
            </param>
            <param name="in_sNewToken">The new Token
            </param>
            <returns> String The new String
            </returns>
            <exception cref="!:RuntimeException">where trying to replace by a new token and this new token contains the token to be replaced
            </exception>
        </member>
        <member name="M:NeoDatis.Tool.Wrappers.OdbString.ReplaceToken(System.String,System.String,System.String,System.Int32)">
            <summary>Replace a string within a string</summary>
            <param name="in_sSourceString">The String to modify
            </param>
            <param name="in_sTokenToReplace">The Token to replace
            </param>
            <param name="in_sNewToken">The new Token
            </param>
            <param name="in_nNbTimes">The number of time, the replace operation must be done. -1 means replace all
            </param>
            <returns> String The new String
            </returns>
            <exception cref="!:RuntimeException">where trying to replace by a new token and this new token contains the token to be replaced
            </exception>
        </member>
        <member name="M:NeoDatis.Tool.Wrappers.OdbString.ExceptionToString(System.Exception,System.Boolean)">
            <summary> If escape==true, then remove $.</summary>
            <param name="e">
            </param>
            <param name="escape">
            </param>
            <returns>
            </returns>
        </member>
        <member name="T:NeoDatis.Tool.Wrappers.OdbSystem">
             @sharpen.ignore
             @author olivier
            
        </member>
        <member name="T:NeoDatis.Tool.Wrappers.OdbTime">
             @sharpen.ignore
             @author olivier
            
        </member>
        <member name="T:NeoDatis.Odb.ClassRepresentation">
            <summary>
            A class abstraction to give access to class level configuration like adding
            an index, checking if index exists, rebuilding an index,...
            </summary>
            <remarks>
            A class abstraction to give access to class level configuration like adding
            an index, checking if index exists, rebuilding an index,...
            </remarks>
            <author>osmadja</author>
        </member>
        <member name="M:NeoDatis.Odb.ClassRepresentation.AddUniqueIndexOn(System.String,System.String[],System.Boolean)">
            <param name="name">The name of the index</param>
            <param name="indexFields">The list of fields of the index</param>
            <param name="verbose">
            A boolean value to indicate of ODB must describe what it is
            doing
            </param>
            <exception cref="T:System.IO.IOException">System.IO.IOException</exception>
            <exception cref="T:System.Exception">System.Exception</exception>
        </member>
        <member name="M:NeoDatis.Odb.ClassRepresentation.AddIndexOn(System.String,System.String[],System.Boolean)">
            <param name="name">The name of the index</param>
            <param name="indexFields">The list of fields of the index</param>
            <param name="verbose">
            A boolean value to indicate of ODB must describe what it is
            doing
            </param>
            <exception cref="T:System.IO.IOException">System.IO.IOException</exception>
            <exception cref="T:System.Exception">System.Exception</exception>
        </member>
        <member name="M:NeoDatis.Odb.ClassRepresentation.AddParameterHelper(NeoDatis.Odb.Core.Layers.Layer2.Instance.ParameterHelper)">
            <summary>
            Adds an helper to tell ODB how to create an instance when no default
            constructor is available
            </summary>
        </member>
        <member name="M:NeoDatis.Odb.ClassRepresentation.RemoveParameterHelper">
            <summary>Remove the parameter helper for this class, if exists</summary>
        </member>
        <member name="M:NeoDatis.Odb.ClassRepresentation.AddInstantiationHelper(NeoDatis.Odb.Core.Layers.Layer2.Instance.InstantiationHelper)">
            <summary>Adds an helper to tell ODB what class to call to create an instance</summary>
        </member>
        <member name="M:NeoDatis.Odb.ClassRepresentation.RemoveInstantiationHelper">
            <summary>Remove the instantiation helper of this class, if exists</summary>
        </member>
        <member name="M:NeoDatis.Odb.ClassRepresentation.AddFullInstantiationHelper(NeoDatis.Odb.Core.Layers.Layer2.Instance.FullInstantiationHelper)">
            <summary>Adds an helper to tell ODB what class to call to create an instance</summary>
        </member>
        <member name="M:NeoDatis.Odb.ClassRepresentation.RemoveFullInstantiationHelper">
            <summary>Remove the instantiation helper of this class, if exists</summary>
        </member>
        <member name="M:NeoDatis.Odb.ClassRepresentation.ExistIndex(System.String)">
            <summary>To check if an index exist</summary>
            <param name="indexName"></param>
            <returns></returns>
        </member>
        <member name="M:NeoDatis.Odb.ClassRepresentation.RebuildIndex(System.String,System.Boolean)">
            <param name="className"></param>
            <param name="indexName"></param>
            <param name="verbose"></param>
        </member>
        <member name="M:NeoDatis.Odb.ClassRepresentation.DeleteIndex(System.String,System.Boolean)">
            <param name="className"></param>
            <param name="indexName"></param>
            <param name="verbose"></param>
        </member>
        <member name="T:NeoDatis.Odb.Core.ICoreProvider">
            <summary>This is the default Core Object Provider.</summary>
            <remarks>This is the default Core Object Provider.</remarks>
            <author>olivier</author>
        </member>
        <member name="T:NeoDatis.Odb.Core.ITwoPhaseInit">
            <summary>A simple interface to guarantee a second init phase for objects.</summary>
            <remarks>
            A simple interface to guarantee a second init phase for objects. This used the CoreProvider objects
            as they can have cyclic reference that can cause cyclic initialization problem. Cyclic initialization
            work should be executed in the second init phase to guarantee we are working on
            complete initialized instance instead of partially initialized
            </remarks>
            <author>olivier</author>
        </member>
        <member name="M:NeoDatis.Odb.Core.ITwoPhaseInit.Init2">
            <summary>The second init phase</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:NeoDatis.Odb.Core.ICoreProvider.GetIO(System.String,NeoDatis.Odb.Core.Layers.Layer3.IBaseIdentification,System.Int32)" -->
        <member name="M:NeoDatis.Odb.Core.ICoreProvider.GetLocalInstanceBuilder(NeoDatis.Odb.Core.Layers.Layer3.IStorageEngine)">
            <summary>Returns the Local Instance Builder</summary>
        </member>
        <member name="M:NeoDatis.Odb.Core.ICoreProvider.GetCollectionQueryResultAction(NeoDatis.Odb.Core.Layers.Layer3.IStorageEngine,NeoDatis.Odb.Core.Query.IQuery,System.Boolean,System.Boolean)">
            <summary>Returns the query result handler for normal query result (that return a collection of objects)
            	</summary>
        </member>
        <member name="M:NeoDatis.Odb.Core.ICoreProvider.GetMessageStreamer(System.Net.Sockets.TcpClient)">
            <summary>To retrieve the message streamer.</summary>
            <remarks>To retrieve the message streamer. used for client server communication</remarks>
            <param name="socket"></param>
            <returns></returns>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer1.Introspector.IClassIntrospector.Instrospect(NeoDatis.Tool.Wrappers.List.IOdbList{NeoDatis.Odb.Core.Layers.Layer2.Meta.ClassInfo})">
            <summary>introspect a list of classes</summary>
            <param name="classInfos"></param>
            <returns>A map where the key is the class name and the key is the ClassInfo: the class meta representation
            	</returns>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer1.Introspector.IClassIntrospector.Introspect(System.Type,System.Boolean)">
            <param name="clazz">The class to instrospect</param>
            <param name="recursive">If true, goes does the hierarchy to try to analyse all classes
            	</param>
            <returns>The list of class info detected while introspecting the class</returns>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer1.Introspector.IClassIntrospector.GetClassInfo(System.String,NeoDatis.Odb.Core.Layers.Layer2.Meta.ClassInfo)">
            <summary>
            Builds a class info from a class and an existing class info
            <pre>
            The existing class info is used to make sure that fields with the same name will have
            the same id
            </pre>
            </summary>
            <param name="fullClassName">The name of the class to get info</param>
            <param name="existingClassInfo"></param>
            <returns>A ClassInfo - a meta representation of the class</returns>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer1.Introspector.IClassIntrospector.GetSuperClasses(System.String,System.Boolean)">
            <param name="fullClassName"></param>
            <param name="includingThis"></param>
            <returns>The list of super classes</returns>
        </member>
        <member name="T:NeoDatis.Odb.Core.Layers.Layer1.Introspector.IIntrospectionCallback">
            <author>
            olivier
            A simple callback used by the introspection API to inform when object are found
            </author>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer1.Introspector.IIntrospectionCallback.ObjectFound(System.Object)">
            <summary>Called when the introspector find a non native object.</summary>
            <remarks>Called when the introspector find a non native object.</remarks>
            <param name="@object"></param>
            <returns>true to continue going recursively, false do not go deeper</returns>
        </member>
        <member name="T:NeoDatis.Odb.Core.Layers.Layer1.Introspector.IObjectIntrospector">
            <summary>Interface for ObjectInstropector.</summary>
            <remarks>Interface for ObjectInstropector. It has local and Client/Server implementation.
            	</remarks>
            <author>osmadja</author>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer1.Introspector.IObjectIntrospector.GetMetaRepresentation(System.Object,NeoDatis.Odb.Core.Layers.Layer2.Meta.ClassInfo,System.Boolean,System.Collections.Generic.IDictionary{System.Object,NeoDatis.Odb.Core.Layers.Layer2.Meta.NonNativeObjectInfo},NeoDatis.Odb.Core.Layers.Layer1.Introspector.IIntrospectionCallback)">
            <summary>retrieve object data</summary>
            <param name="@object">The object to get meta representation</param>
            <param name="ci">The ClassInfo</param>
            <param name="recursive">To indicate that introspection must be recursive</param>
            <param name="alreadyReadObjects">A map with already read object, to avoid cyclic reference problem
            	</param>
            <returns>The object info</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:NeoDatis.Odb.Core.Layers.Layer2.Instance.IInstanceBuilder.BuildOneInstance(NeoDatis.Odb.Core.Layers.Layer2.Meta.NonNativeObjectInfo)" -->
        <member name="M:NeoDatis.Odb.Core.Layers.Layer2.Instance.IInstanceBuilder.GetSessionId">
            <summary>Returns the session id of this instance builder (odb database identifier)
            	</summary>
            <returns></returns>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer2.Instance.IInstanceBuilder.IsLocal">
            <summary>To specify if instance builder is part of local StorageEngine.</summary>
            <remarks>
            To specify if instance builder is part of local StorageEngine. In server mode, for instance, when called on
            the server, it will return false
            </remarks>
            <returns></returns>
        </member>
        <member name="T:NeoDatis.Odb.Core.Layers.Layer2.Instance.InstantiationHelper">
            <summary>Create an instance of a class in some way which can't be managed just via reflection
            	</summary>
        </member>
        <member name="T:NeoDatis.Odb.Core.Layers.Layer2.Instance.ParameterHelper">
            <summary>Provide constructor parameters for constructors which don't allow nulls as default values.
            	</summary>
            <remarks>Provide constructor parameters for constructors which don't allow nulls as default values. Used by the InstanceBuilder.
            	</remarks>
        </member>
        <member name="T:NeoDatis.Odb.Core.Layers.Layer2.Meta.AbstractObjectInfo">
            <summary>To keep meta informations about an object</summary>
            <author>olivier smadja</author>
        </member>
        <member name="F:NeoDatis.Odb.Core.Layers.Layer2.Meta.AbstractObjectInfo.odbTypeId">
            <summary>The Type Id of the object</summary>
        </member>
        <member name="F:NeoDatis.Odb.Core.Layers.Layer2.Meta.AbstractObjectInfo.odbType">
            <summary>The Type of the object</summary>
        </member>
        <member name="F:NeoDatis.Odb.Core.Layers.Layer2.Meta.AbstractObjectInfo.position">
            <summary>The position of the object</summary>
        </member>
        <member name="T:NeoDatis.Odb.Core.Layers.Layer2.Meta.ArrayObjectInfo">
            <summary>A meta representation of an Array</summary>
            <author>osmadja</author>
        </member>
        <member name="T:NeoDatis.Odb.Core.Layers.Layer2.Meta.GroupObjectInfo">
            <summary>A super class for CollectionObjectInfo, MapObjectInfo and ArrayObjectInfo.
            	</summary>
            <remarks>
            A super class for CollectionObjectInfo, MapObjectInfo and ArrayObjectInfo. It keeps a list
            of reference to non native objects contained in theses structures
            </remarks>
            <author>osmadja</author>
        </member>
        <member name="T:NeoDatis.Odb.Core.Layers.Layer2.Meta.NativeObjectInfo">
            <summary>To keep info about a native instance</summary>
            <author>olivier s</author>
        </member>
        <member name="F:NeoDatis.Odb.Core.Layers.Layer2.Meta.NativeObjectInfo.theObject">
            <summary>The object being represented</summary>
        </member>
        <member name="T:NeoDatis.Odb.Core.Layers.Layer2.Meta.AtomicNativeObjectInfo">
            <summary>To keep info about a native object like int,char, long, Does not include array or collection
            	</summary>
            <author>olivier s</author>
        </member>
        <member name="T:NeoDatis.Odb.Core.Layers.Layer2.Meta.AttributeValuesMap">
            <summary>A Map to contain values of attributes of an object.</summary>
            <remarks>
            A Map to contain values of attributes of an object.
            It is used to optimize a criteria query execution where ODB , while reading an instance data, tries to retrieve only values
            of attributes involved in the query instead of reading the entire object.
            </remarks>
            <author>olivier s</author>
        </member>
        <member name="F:NeoDatis.Odb.Core.Layers.Layer2.Meta.AttributeValuesMap.objectInfoHeader">
            <summary>The Object Info Header of the object being represented</summary>
        </member>
        <member name="F:NeoDatis.Odb.Core.Layers.Layer2.Meta.AttributeValuesMap.oid">
            <summary>The oid of the object.</summary>
            <remarks>
            The oid of the object. This is used when some criteria (example is equalCriterion) is on an object,
            in this case the comparison is done on the oid of the object and not on the object itself.
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "T:NeoDatis.Odb.Core.Layers.Layer2.Meta.CIZoneInfo" -->
        <member name="T:NeoDatis.Odb.Core.Layers.Layer2.Meta.ClassAttributeInfo">
            <summary>
            to keep informations about an attribute of a class :
            <pre>
            - Its type
            - its name
            - If it is an index
            </pre>
            </summary>
            <author>olivier s</author>
        </member>
        <member name="F:NeoDatis.Odb.Core.Layers.Layer2.Meta.ClassAttributeInfo.nativeClass">
            <summary>can be null</summary>
        </member>
        <member name="T:NeoDatis.Odb.Core.Layers.Layer2.Meta.ClassInfo">
            <summary>A meta representation of a class</summary>
            <author>osmadja</author>
        </member>
        <member name="F:NeoDatis.Odb.Core.Layers.Layer2.Meta.ClassInfo.CategorySystemClass">
            <summary>Constant used for the classCategory variable to indicate a system class</summary>
        </member>
        <member name="F:NeoDatis.Odb.Core.Layers.Layer2.Meta.ClassInfo.CategoryUserClass">
            <summary>Constant used for the classCategory variable to indicate a user class</summary>
        </member>
        <member name="F:NeoDatis.Odb.Core.Layers.Layer2.Meta.ClassInfo.classCategory">
            <summary>To specify the type of the class : system class or user class</summary>
        </member>
        <member name="F:NeoDatis.Odb.Core.Layers.Layer2.Meta.ClassInfo.fullClassName">
            <summary>The full class name with package</summary>
        </member>
        <member name="F:NeoDatis.Odb.Core.Layers.Layer2.Meta.ClassInfo.extraInfo">
            <summary>Extra info of the class - no used in java version</summary>
        </member>
        <member name="F:NeoDatis.Odb.Core.Layers.Layer2.Meta.ClassInfo.attributesByName">
            <summary>
            This map is redundant with the field 'attributes', but it is to enable
            fast access to attributes by name TODO use only the map and remove list
            key=attribute name, key =ClassInfoattribute
            </summary>
        </member>
        <member name="F:NeoDatis.Odb.Core.Layers.Layer2.Meta.ClassInfo.attributesById">
            <summary>
            This map is redundant with the field 'attributes', but it is to enable
            fast access to attributes by id key=attribute Id(Integer), key
            =ClassAttributeInfo
            </summary>
        </member>
        <member name="F:NeoDatis.Odb.Core.Layers.Layer2.Meta.ClassInfo.original">
            <summary>
            To keep session original numbers, original number of committed
            objects,first and last object position
            </summary>
        </member>
        <member name="F:NeoDatis.Odb.Core.Layers.Layer2.Meta.ClassInfo.committed">
            <summary>
            To keep session numbers, number of committed objects,first and last
            object position
            </summary>
        </member>
        <member name="F:NeoDatis.Odb.Core.Layers.Layer2.Meta.ClassInfo.uncommitted">
            <summary>
            To keep session uncommitted numbers, number of uncommitted objects,first
            and last object position
            </summary>
        </member>
        <member name="F:NeoDatis.Odb.Core.Layers.Layer2.Meta.ClassInfo.position">
            <summary>Physical location of this class in the file (in byte)</summary>
        </member>
        <member name="F:NeoDatis.Odb.Core.Layers.Layer2.Meta.ClassInfo.previousClassOID">
            <summary>Where is the previous class.</summary>
            <remarks>Where is the previous class. -1, if it does not exist</remarks>
        </member>
        <member name="F:NeoDatis.Odb.Core.Layers.Layer2.Meta.ClassInfo.nextClassOID">
            <summary>Where is the next class, -1, if it does not exist</summary>
        </member>
        <member name="F:NeoDatis.Odb.Core.Layers.Layer2.Meta.ClassInfo.attributesDefinitionPosition">
            <summary>Where starts the block of attributes definition of this class ?</summary>
        </member>
        <member name="F:NeoDatis.Odb.Core.Layers.Layer2.Meta.ClassInfo.blockSize">
            <summary>The size (in bytes) of the class block</summary>
        </member>
        <member name="F:NeoDatis.Odb.Core.Layers.Layer2.Meta.ClassInfo.lastObjectInfoHeader">
            <summary>Infos about the last object of this class</summary>
        </member>
        <member name="F:NeoDatis.Odb.Core.Layers.Layer2.Meta.ClassInfo.maxAttributeId">
            <summary>
            The max id is used to give a unique id for each attribute and allow
            refactoring like new field and/or removal
            </summary>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer2.Meta.ClassInfo.GetFullClassName">
            <returns>the fullClassName</returns>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer2.Meta.ClassInfo.GetAllNonNativeAttributes">
            <summary>
            This method could be optimized, but it is only on Class creation, one
            time in the database life time...
            </summary>
            <remarks>
            This method could be optimized, but it is only on Class creation, one
            time in the database life time... This is used to get all (non native)
            attributes a class info have to store them in the meta model before
            storing the class itself
            </remarks>
            <returns></returns>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer2.Meta.ClassInfo.RemoveIndex(NeoDatis.Odb.Core.Layers.Layer2.Meta.ClassInfoIndex)">
            <summary>Removes an index</summary>
            <param name="cii"></param>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer2.Meta.ClassInfo.HasCyclicReference">
            <summary>To detect if a class has cyclic reference</summary>
            <returns>true if this class info has cyclic references</returns>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer2.Meta.ClassInfo.HasCyclicReference(System.Collections.Generic.IDictionary{System.String,NeoDatis.Odb.Core.Layers.Layer2.Meta.ClassInfo})">
            <summary>To detect if a class has cyclic reference</summary>
            <param name="alreadyVisitedClasses">A hashmap containg all the already visited classes
            	</param>
            <returns>true if this class info has cyclic references</returns>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer2.Meta.ClassInfo.GetNumberOfObjects">
            <summary>Get number of objects: committed and uncommitted</summary>
            <returns>The number of committed and uncommitted objects</returns>
        </member>
        <member name="T:NeoDatis.Odb.Core.Layers.Layer2.Meta.ClassInfoCompareResult">
            <summary>To keep track of differences between two ClassInfo.</summary>
            <remarks>To keep track of differences between two ClassInfo. Ussed by the MetaModel compatibility checker
            	</remarks>
            <author>osmadja</author>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer2.Meta.ClassInfoCompareResult.GetCompatibleChanges">
            <returns>the compatibleChanges</returns>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer2.Meta.ClassInfoCompareResult.SetCompatibleChanges(NeoDatis.Tool.Wrappers.List.IOdbList{System.String})">
            <param name="compatibleChanges">the compatibleChanges to set</param>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer2.Meta.ClassInfoCompareResult.GetIncompatibleChanges">
            <returns>the incompatibleChanges</returns>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer2.Meta.ClassInfoCompareResult.SetIncompatibleChanges(NeoDatis.Tool.Wrappers.List.IOdbList{System.String})">
            <param name="incompatibleChanges">the incompatibleChanges to set</param>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer2.Meta.ClassInfoCompareResult.IsCompatible">
            <returns>the isCompatible</returns>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer2.Meta.ClassInfoCompareResult.GetFullClassName">
            <returns>the fullClassName</returns>
        </member>
        <member name="T:NeoDatis.Odb.Core.Layers.Layer2.Meta.ClassInfoIndex">
            <summary>An index of a class info</summary>
            <author>osmadja</author>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer2.Meta.ClassInfoIndex.MatchAttributeIds(System.Int32[])">
            <summary>Check if a list of attribute can use the index</summary>
            <param name="attributeIdsToMatch"></param>
            <returns>true if the list of attribute can use this index</returns>
        </member>
        <member name="T:NeoDatis.Odb.Core.Layers.Layer2.Meta.ClassInfoList">
            <summary>A simple list to contain some class infos.</summary>
            <remarks>
            A simple list to contain some class infos.
            <pre>
            It used by ClassIntropector.introspect to return all the class info detected by introspecting a class.
            For example, if we have a class Class1 that has a field of type Class2. And Class2 has a field of type Class3.
            Introspecting Class1 return a ClassInfoList with the classes Class1, Class2, Class3. Class1 being the main class info
            </pre>
            </remarks>
            <author>osmadja</author>
        </member>
        <member name="F:NeoDatis.Odb.Core.Layers.Layer2.Meta.ClassInfoList.classInfos">
            <summary>key=ClassInfoName,value=ClassInfo</summary>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer2.Meta.ClassInfoList.GetClassInfoWithName(System.String)">
            <param name="name"></param>
            <returns>null if it does not exist</returns>
        </member>
        <member name="T:NeoDatis.Odb.Core.Layers.Layer2.Meta.CollectionObjectInfo">
            <summary>Meta representation of a collection</summary>
            <author>osmadja</author>
        </member>
        <member name="T:NeoDatis.Odb.Core.Layers.Layer2.Meta.CommittedCIZoneInfo">
            <summary>Used for committed zone info.</summary>
            <remarks>
            Used for committed zone info. It has one more attribute than the super class. It is used
            to keep track of committed deleted objects
            </remarks>
            <author>osmadja</author>
        </member>
        <member name="F:NeoDatis.Odb.Core.Layers.Layer2.Meta.Compare.ArrayModifyElement.attributeId">
            <summary>The array id</summary>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer2.Meta.Compare.ArrayModifyElement.GetArrayPositionDefinition">
            <summary>Return the position where the array position is stored</summary>
            <returns></returns>
        </member>
        <member name="T:NeoDatis.Odb.Core.Layers.Layer2.Meta.Compare.ChangedNativeAttributeAction">
            <summary>Used to store informations about object changes at attribute level</summary>
            <author>osmadja</author>
        </member>
        <member name="F:NeoDatis.Odb.Core.Layers.Layer2.Meta.Compare.ChangedNativeAttributeAction.oldNnoi">
            <summary>The old object meta representation: is case of no in place update</summary>
        </member>
        <member name="F:NeoDatis.Odb.Core.Layers.Layer2.Meta.Compare.ChangedNativeAttributeAction.newNoi">
            <summary>The new object meta representation: is case of no in place update</summary>
        </member>
        <member name="F:NeoDatis.Odb.Core.Layers.Layer2.Meta.Compare.ChangedNativeAttributeAction.reallyCantDoInPlaceUpdate">
            <summary>This boolean value is set to true when original object is null, is this case there is no way to do in place update
            	</summary>
        </member>
        <member name="T:NeoDatis.Odb.Core.Layers.Layer2.Meta.Compare.ChangedObjectInfo">
            <summary>Used to store informations about object changes</summary>
        </member>
        <member name="T:NeoDatis.Odb.Core.Layers.Layer2.Meta.Compare.ChangedObjectReferenceAttributeAction">
            <summary>Used to store informations about object changes when the change is only a reference change
            	</summary>
            <author>osmadja</author>
        </member>
        <member name="T:NeoDatis.Odb.Core.Layers.Layer2.Meta.Compare.NewNonNativeObjectAction">
            <summary>Used to store that a new Object was created when comparing to Objects.</summary>
            <remarks>Used to store that a new Object was created when comparing to Objects.</remarks>
            <author>osmadja</author>
        </member>
        <member name="T:NeoDatis.Odb.Core.Layers.Layer2.Meta.EnumNativeObjectInfo">
            <summary>Meta representation of an enum.</summary>
            <remarks>
            Meta representation of an enum. Which is internally represented by a string :
            Its name
            </remarks>
            <author>osmadja</author>
        </member>
        <member name="T:NeoDatis.Odb.Core.Layers.Layer2.Meta.MapObjectInfo">
            <summary>Meta representation of a Map</summary>
            <author>osmadja</author>
        </member>
        <member name="T:NeoDatis.Odb.Core.Layers.Layer2.Meta.MetaModel">
            <summary>The database meta-model</summary>
            <author>olivier s</author>
        </member>
        <member name="F:NeoDatis.Odb.Core.Layers.Layer2.Meta.MetaModel.rapidAccessForUserClassesByName">
            <summary>A hash map to speed up the access of classinfo by full class name</summary>
        </member>
        <member name="F:NeoDatis.Odb.Core.Layers.Layer2.Meta.MetaModel.allClassInfos">
            <summary>A simple list to hold all class infos.</summary>
            <remarks>A simple list to hold all class infos. It is redundant with the maps, but in some cases, we need sequential access to classes :-(
            	</remarks>
        </member>
        <member name="F:NeoDatis.Odb.Core.Layers.Layer2.Meta.MetaModel.hasChanged">
            <summary>to identify if meta model has changed</summary>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer2.Meta.MetaModel.GetClassInfoFromId(NeoDatis.Odb.OID)">
            <summary>Gets the class info from the OID.</summary>
            <remarks>Gets the class info from the OID.</remarks>
            <param name="id"></param>
            <returns>the class info with the OID</returns>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer2.Meta.MetaModel.GetLastClassInfo">
            <returns>The Last class info</returns>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer2.Meta.MetaModel.SlowGetUserClassInfoIndex(NeoDatis.Odb.Core.Layers.Layer2.Meta.ClassInfo)">
            <summary>This method is only used by the odb explorer.</summary>
            <remarks>
            This method is only used by the odb explorer. So there is no too much
            problem with performance issue.
            </remarks>
            <param name="ci"></param>
            <returns>The index of the class info</returns>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer2.Meta.MetaModel.GetClassInfo(System.Int32)">
            <param name="index">The index of the class info to get</param>
            <returns>The class info at the specified index</returns>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer2.Meta.MetaModel.SlowGetUserClassInfo(System.Int32)">
            <summary>The method is slow nut it is only used in the odb explorer.</summary>
            <remarks>The method is slow nut it is only used in the odb explorer.</remarks>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer2.Meta.MetaModel.AddChangedClass(NeoDatis.Odb.Core.Layers.Layer2.Meta.ClassInfo)">
            <summary>
            Saves the fact that something has changed in the class (number of
            objects or last object oid)
            </summary>
            <param name="ci"></param>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer2.Meta.MetaModel.FromClassInfos(NeoDatis.Tool.Wrappers.List.IOdbList{NeoDatis.Odb.Core.Layers.Layer2.Meta.ClassInfo})">
            <summary>Builds a meta model from a list of class infos</summary>
            <param name="classInfos"></param>
            <returns>The new Metamodel</returns>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer2.Meta.MetaModel.GetPersistentSubclassesOf(System.String)">
            <summary>Gets all the persistent classes that are subclasses or equal to the parameter class
            	</summary>
            <param name="fullClassName"></param>
            <returns>The list of class info of persistent classes that are subclasses or equal to the class
            	</returns>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer2.Meta.MetaModel.Duplicate">
            <returns></returns>
        </member>
        <member name="T:NeoDatis.Odb.Core.Layers.Layer2.Meta.NativeAttributeHeader">
            <summary>A class that contain basic information about a native object</summary>
            <author>osmadja</author>
        </member>
        <member name="T:NeoDatis.Odb.Core.Layers.Layer2.Meta.NonNativeDeletedObjectInfo">
            <summary>To specify that an object has been mark as deleted</summary>
            <author>olivier s</author>
        </member>
        <member name="T:NeoDatis.Odb.Core.Layers.Layer2.Meta.NonNativeObjectInfo">
            <summary>
            To keep info about a non native object
            <pre>
            - Keeps its class info : a meta information to describe its type
            - All its attributes values
            - Its Pointers : its position, the previous object OID, the next object OID
            - The Object being represented by The meta information
            </pre>
            </summary>
            <author>olivier s</author>
        </member>
        <member name="F:NeoDatis.Odb.Core.Layers.Layer2.Meta.NonNativeObjectInfo.object">
            <summary>The object being represented</summary>
        </member>
        <member name="F:NeoDatis.Odb.Core.Layers.Layer2.Meta.NonNativeObjectInfo.allNonNativeObjects">
            <summary>To keep track of all non native objects , not used for instance</summary>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer2.Meta.NonNativeObjectInfo.SetValueOf(System.String,NeoDatis.Odb.Core.Layers.Layer2.Meta.AbstractObjectInfo)">
            <summary>Used to change the value of an attribute</summary>
            <param name="attributeName"></param>
            <param name="aoi"></param>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer2.Meta.NonNativeObjectInfo.CreateCopy(System.Collections.Generic.IDictionary{NeoDatis.Odb.OID,NeoDatis.Odb.Core.Layers.Layer2.Meta.AbstractObjectInfo},System.Boolean)">
            <summary>Create a copy oh this meta object</summary>
            <param name="onlyData">if true, only copy attributes values</param>
            <returns></returns>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer2.Meta.NonNativeObjectInfo.GetAttributeId(NeoDatis.Odb.Core.Layers.Layer2.Meta.AbstractObjectInfo)">
            <summary>The performance of this method is bad.</summary>
            <remarks>The performance of this method is bad. But it is not used by the engine, only in the ODBExplorer
            	</remarks>
            <param name="aoi"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:NeoDatis.Odb.Core.Layers.Layer2.Meta.NonNativeObjectInfo.GetAttributeDefinitionPosition(System.Int32)" -->
        <member name="M:NeoDatis.Odb.Core.Layers.Layer2.Meta.NonNativeObjectInfo.SetHeader(NeoDatis.Odb.Core.Layers.Layer2.Meta.ObjectInfoHeader)">
            <param name="header"></param>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer2.Meta.NonNativeDeletedObjectInfo.IsNull">
            <summary>A deleted non native object is considered to be null!</summary>
        </member>
        <member name="T:NeoDatis.Odb.Core.Layers.Layer2.Meta.NonNativeNullObjectInfo">
            <summary>To keep info about a non native null instance</summary>
            <author>olivier s</author>
        </member>
        <member name="T:NeoDatis.Odb.Core.Layers.Layer2.Meta.NullNativeObjectInfo">
            <summary>Meta representation of a null native object</summary>
            <author>osmadja</author>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer2.Meta.NullNativeObjectInfo.GetInstance">
            <returns></returns>
        </member>
        <member name="T:NeoDatis.Odb.Core.Layers.Layer2.Meta.ObjectInfoHeader">
            <summary>Some basic info about an object info like position, its class info,...</summary>
            <remarks>Some basic info about an object info like position, its class info,...</remarks>
            <author>osmadja</author>
        </member>
        <member name="F:NeoDatis.Odb.Core.Layers.Layer2.Meta.ObjectInfoHeader.attributesIdentification">
            <summary>Can be position(for native object) or id(for non native object, positions are positive e ids are negative
            	</summary>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer2.Meta.ObjectInfoHeader.GetAttributeIdentificationFromId(System.Int32)">
            <summary>
            Return the attribute identification (position or id) from the attribute id
            FIXME Remove dependency from StorageEngineConstant
            </summary>
            <param name="attributeId"></param>
            <returns>-1 if attribute with this id does not exist</returns>
        </member>
        <member name="T:NeoDatis.Odb.Core.Layers.Layer2.Meta.ObjectReference">
            <summary>Meta representation of an object reference.</summary>
            <remarks>Meta representation of an object reference.</remarks>
            <author>osmadja</author>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer2.Meta.ObjectReference.GetOid">
            <returns>Returns the id.</returns>
        </member>
        <member name="T:NeoDatis.Odb.Core.Layers.Layer2.Meta.ODBType">
            <summary>Contains the list for the ODB types</summary>
            <author>olivier s</author>
        </member>
        <member name="F:NeoDatis.Odb.Core.Layers.Layer2.Meta.ODBType.NativeByteId">
            <summary>1 byte</summary>
        </member>
        <member name="F:NeoDatis.Odb.Core.Layers.Layer2.Meta.ODBType.NativeShortId">
            <summary>2 byte</summary>
        </member>
        <member name="F:NeoDatis.Odb.Core.Layers.Layer2.Meta.ODBType.NativeIntId">
            <summary>4 byte</summary>
        </member>
        <member name="F:NeoDatis.Odb.Core.Layers.Layer2.Meta.ODBType.NativeLongId">
            <summary>8 bytes</summary>
        </member>
        <member name="F:NeoDatis.Odb.Core.Layers.Layer2.Meta.ODBType.NativeFloatId">
            <summary>4 byte</summary>
        </member>
        <member name="F:NeoDatis.Odb.Core.Layers.Layer2.Meta.ODBType.NativeDoubleId">
            <summary>8 byte</summary>
        </member>
        <member name="F:NeoDatis.Odb.Core.Layers.Layer2.Meta.ODBType.EnumId">
            <summary>Enums are internally stored as String: the enum name</summary>
        </member>
        <member name="F:NeoDatis.Odb.Core.Layers.Layer2.Meta.ODBType.defaultInstanciationClass">
            <summary>Used to instantiate the class when complex subclass is referenced.</summary>
            <remarks>
            Used to instantiate the class when complex subclass is referenced. example, when a Collection$SynchronizedMap is referenced
            ODB, will use HashMap instead
            </remarks>
        </member>
        <member name="F:NeoDatis.Odb.Core.Layers.Layer2.Meta.ODBType.subType">
            <summary>For array element type</summary>
        </member>
        <member name="F:NeoDatis.Odb.Core.Layers.Layer2.Meta.ODBType.NativeBoolean">
            <summary>1 byte</summary>
        </member>
        <member name="F:NeoDatis.Odb.Core.Layers.Layer2.Meta.ODBType.NativeByte">
            <summary>1 byte</summary>
        </member>
        <member name="F:NeoDatis.Odb.Core.Layers.Layer2.Meta.ODBType.NativeChar">
            <summary>2 byte</summary>
        </member>
        <member name="F:NeoDatis.Odb.Core.Layers.Layer2.Meta.ODBType.NativeShort">
            <summary>2 byte</summary>
        </member>
        <member name="F:NeoDatis.Odb.Core.Layers.Layer2.Meta.ODBType.NativeInt">
            <summary>4 byte</summary>
        </member>
        <member name="F:NeoDatis.Odb.Core.Layers.Layer2.Meta.ODBType.NativeLong">
            <summary>8 bytes</summary>
        </member>
        <member name="F:NeoDatis.Odb.Core.Layers.Layer2.Meta.ODBType.NativeFloat">
            <summary>4 byte</summary>
        </member>
        <member name="F:NeoDatis.Odb.Core.Layers.Layer2.Meta.ODBType.NativeDouble">
            <summary>8 byte</summary>
        </member>
        <member name="F:NeoDatis.Odb.Core.Layers.Layer2.Meta.ODBType.cacheOfTypesByName">
            <summary>This cache is used to cache non default types.</summary>
            <remarks>This cache is used to cache non default types. Instead or always testing if a class is an array or a collection or any other, we put the odbtype in this cache
            	</remarks>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer2.Meta.ODBType.IsDate">
            <returns></returns>
        </member>
        <member name="T:NeoDatis.Odb.Core.Layers.Layer2.Meta.SessionMetaModel">
            <summary>The main implementation of the MetaModel abstract class.</summary>
            <remarks>The main implementation of the MetaModel abstract class.</remarks>
            <author>osmadja</author>
        </member>
        <member name="F:NeoDatis.Odb.Core.Layers.Layer2.Meta.SessionMetaModel.changedClasses">
            <summary>
            A list of changed classes - that must be persisted back when commit is
            done
            </summary>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer2.Meta.SessionMetaModel.AddChangedClass(NeoDatis.Odb.Core.Layers.Layer2.Meta.ClassInfo)">
            <summary>
            Saves the fact that something has changed in the class (number of objects
            or last object oid)
            </summary>
            <param name="classInfo"></param>
            <param name="uci"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "T:NeoDatis.Odb.Core.Layers.Layer3.Engine.AbstractStorageEngine" -->
        <member name="T:NeoDatis.Odb.Core.Layers.Layer3.Engine.AbstractStorageEngineReader">
            <author>olivier</author>
        </member>
        <member name="T:NeoDatis.Odb.Core.Layers.Layer3.IStorageEngine">
            <summary>The interface of all that a StorageEngine (Main concept in ODB) must do.
            	</summary>
            <remarks>The interface of all that a StorageEngine (Main concept in ODB) must do.
            	</remarks>
            <author>osmadja</author>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer3.IStorageEngine.Store(System.Object)">
            <summary>Store an object in an database.</summary>
            <remarks>
            Store an object in an database.
            To detect if object must be updated or insert, we use the cache. To
            update an object, it must be first selected from the database. When an
            object is to be stored, if it exist in the cache, then it will be
            updated, else it will be inserted as a new object. If the object is null,
            the cache will be used to check if the meta representation is in the
            cache
            </remarks>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer3.IStorageEngine.GetObjectInfos``1(NeoDatis.Odb.Core.Query.IQuery,System.Boolean,System.Int32,System.Int32,System.Boolean)">
            <summary>Return Meta representation of objects</summary>
            <param name="query">The query to select objects</param>
            <param name="inMemory">To indicate if object must be all loaded in memory</param>
            <param name="startIndex">First object index</param>
            <param name="endIndex">Last object index</param>
            <param name="returnOjects">To indicate if object instances must be created</param>
            <returns>The list of objects @</returns>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer3.IStorageEngine.GetCurrentIdBlockNumber">
            <returns>Returns the currentIdBlockNumber.</returns>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer3.IStorageEngine.GetCurrentIdBlockPosition">
            <returns>Returns the currentIdBlockPosition.</returns>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer3.IStorageEngine.GetCurrentIdBlockMaxOid">
            <returns>Returns the currentIdBlockMaxId.</returns>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer3.IStorageEngine.WriteObjectInfo(NeoDatis.Odb.OID,NeoDatis.Odb.Core.Layers.Layer2.Meta.NonNativeObjectInfo,System.Int64,System.Boolean)">
            <summary>Write an object already transformed into meta representation!</summary>
            <param name="oid"></param>
            <param name="nnoi"></param>
            <param name="position"></param>
            <param name="updatePointers"></param>
            <returns>te object position(or id (if &lt;0, it is id)) @</returns>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer3.IStorageEngine.UpdateObject(NeoDatis.Odb.Core.Layers.Layer2.Meta.NonNativeObjectInfo,System.Boolean)">
            <summary>Updates an object already transformed into meta representation!</summary>
            <param name="nnoi">The Object Meta representation</param>
            <param name="forceUpdate"></param>
            <returns>The OID of the update object @</returns>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer3.IStorageEngine.AddIndexOn(System.String,System.String,System.String[],System.Boolean,System.Boolean)">
            <param name="className">The class name on which the index must be created</param>
            <param name="name">The name of the index</param>
            <param name="indexFields">The list of fields of the index</param>
            <param name="verbose">
            A boolean value to indicate of ODB must describe what it is
            doing @ @
            </param>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer3.IStorageEngine.GetRefactorManager">
            <summary>Returns the object used to refactor the database</summary>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer3.IStorageEngine.IsLocal">
            <summary>
            Used to know if the storage engine is executed in local mode (embedded
            mode) or client server mode
            </summary>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer3.IStorageEngine.Reconnect(System.Object)">
            <summary>Used to reconnect an object to the current session</summary>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer3.IStorageEngine.Disconnect(System.Object)">
            <summary>Used to disconnect the object from the current session.</summary>
            <remarks>
            Used to disconnect the object from the current session. The object is
            removed from the cache
            </remarks>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer3.IStorageEngine.RebuildIndex(System.String,System.String,System.Boolean)">
            <param name="className"></param>
            <param name="indexName"></param>
            <param name="verbose"></param>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer3.IStorageEngine.DeleteIndex(System.String,System.String,System.Boolean)">
            <param name="className"></param>
            <param name="indexName"></param>
            <param name="verbose"></param>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer3.IStorageEngine.CheckMetaModelCompatibility(System.Collections.Generic.IDictionary{System.String,NeoDatis.Odb.Core.Layers.Layer2.Meta.ClassInfo})">
            <summary>
            Receive the current class info (loaded from current java classes present on classpath
            and check against the persisted meta model
            </summary>
            <param name="currentCIs"></param>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer3.IStorageEngine.CriteriaQuery(System.Type,NeoDatis.Odb.Core.Query.Criteria.ICriterion)">
            <param name="clazz"></param>
            <param name="criterion"></param>
            <returns></returns>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer3.IStorageEngine.CriteriaQuery(System.Type)">
            <param name="clazz"></param>
            <returns></returns>
        </member>
        <member name="F:NeoDatis.Odb.Core.Layers.Layer3.Engine.AbstractStorageEngineReader.isClosed">
            <summary>To check if database has already been closed</summary>
        </member>
        <member name="F:NeoDatis.Odb.Core.Layers.Layer3.Engine.AbstractStorageEngineReader.baseIdentification">
            <summary>
            The file parameters - if we are accessing a file, it will be a
            IOFileParameters that contains the file name
            </summary>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer3.Engine.AbstractStorageEngineReader.RebuildIndex(System.String,System.String,System.Boolean)">
            <summary>Used to rebuild an index</summary>
        </member>
        <member name="F:NeoDatis.Odb.Core.Layers.Layer3.Engine.AbstractStorageEngine.nbClasses">
            <summary>The meta-model number of classes - used only for meta model loading</summary>
        </member>
        <member name="F:NeoDatis.Odb.Core.Layers.Layer3.Engine.AbstractStorageEngine.lastOdbCloseStatus">
            <summary>the last odb close status - to check if a recover is necessary</summary>
        </member>
        <member name="F:NeoDatis.Odb.Core.Layers.Layer3.Engine.AbstractStorageEngine.currentIdBlockPosition">
            <summary>The position of the current block where IDs are stored</summary>
        </member>
        <member name="F:NeoDatis.Odb.Core.Layers.Layer3.Engine.AbstractStorageEngine.currentIdBlockNumber">
            <summary>The current id block number</summary>
        </member>
        <member name="F:NeoDatis.Odb.Core.Layers.Layer3.Engine.AbstractStorageEngine.currentIdBlockMaxOid">
            <summary>The max id already allocated in the current id block</summary>
        </member>
        <member name="F:NeoDatis.Odb.Core.Layers.Layer3.Engine.AbstractStorageEngine.isLocal">
            <summary>
            Used to know if the storage engine is executed in local mode (embedded
            mode) or client server mode
            </summary>
        </member>
        <member name="F:NeoDatis.Odb.Core.Layers.Layer3.Engine.AbstractStorageEngine.currentTransactionId">
            <summary>To keep track of current transaction Id</summary>
        </member>
        <member name="F:NeoDatis.Odb.Core.Layers.Layer3.Engine.AbstractStorageEngine.introspectionCallbackForInsert">
            <summary>This is a visitor used to execute some specific action(like calling 'Before Insert Trigger')  when introspecting an object
            	</summary>
        </member>
        <member name="F:NeoDatis.Odb.Core.Layers.Layer3.Engine.AbstractStorageEngine.introspectionCallbackForUpdate">
            <summary>This is a visitor used to execute some specific action when introspecting an object
            	</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:NeoDatis.Odb.Core.Layers.Layer3.Engine.AbstractStorageEngine.#ctor(NeoDatis.Odb.Core.Layers.Layer3.IBaseIdentification)" -->
        <member name="M:NeoDatis.Odb.Core.Layers.Layer3.Engine.AbstractStorageEngine.CheckMetaModelCompatibility(System.Collections.Generic.IDictionary{System.String,NeoDatis.Odb.Core.Layers.Layer2.Meta.ClassInfo})">
            <summary>
            Receive the current class info (loaded from current java classes present on classpath
            and check against the persisted meta model
            </summary>
            <param name="currentCIs"></param>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer3.Engine.AbstractStorageEngine.CheckRuntimeCompatibility">
            <summary>This is a runtime compatibility check.</summary>
            <remarks>This is a runtime compatibility check. Java version must be greater than 1.5
            	</remarks>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer3.Engine.AbstractStorageEngine.InternalStore(System.Object)">
            <summary>Store an object in ODBFactory database.</summary>
            <remarks>
            Store an object in ODBFactory database.
            <pre>
            Transforms the object into meta representation and calls the internalStoreObject
            </pre>
            </remarks>
            <param name="@object"></param>
            <returns>The object insertion position</returns>
            <exception cref="T:System.IO.IOException">System.IO.IOException</exception>
        </member>
        <!-- Badly formed XML comment ignored for member "M:NeoDatis.Odb.Core.Layers.Layer3.Engine.AbstractStorageEngine.InternalStore(NeoDatis.Odb.OID,System.Object)" -->
        <member name="M:NeoDatis.Odb.Core.Layers.Layer3.Engine.AbstractStorageEngine.DeleteObjectWithOid(NeoDatis.Odb.OID)">
            <summary>Warning,</summary>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer3.Engine.AbstractStorageEngine.Delete(System.Object)">
            <summary>Actually deletes an object database</summary>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer3.Engine.AbstractStorageEngine.ToString">
            <summary>Returns a string of the meta-model</summary>
            <returns>The engine description</returns>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer3.Engine.AbstractStorageEngine.Reconnect(System.Object)">
            <summary>Reconnect an object to the current session.</summary>
            <remarks>
            Reconnect an object to the current session. It connects the object and
            all the dependent objects (Objects accessible from the object graph of the
            root object
            </remarks>
        </member>
        <member name="T:NeoDatis.Odb.Core.Layers.Layer3.Engine.CheckMetaModelResult">
            <author>olivier</author>
        </member>
        <member name="T:NeoDatis.Odb.Core.Layers.Layer3.Engine.FileSystemInterface">
            <summary>
            Class that knows how to read/write all language native types : byte, char,
            String, int, long,....
            </summary>
            <remarks>
            Class that knows how to read/write all language native types : byte, char,
            String, int, long,....
            </remarks>
            <author>osmadja</author>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer3.Engine.IFileSystemInterface.SetWritePositionNoVerification(System.Int64,System.Boolean)">
            <summary>Does the same thing than setWritePosition, but do not control write position
            	</summary>
            <param name="position"></param>
            <param name="writeInTransacation"></param>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer3.Engine.IFileSystemInterface.GetParameters">
            <returns>Returns the parameters.</returns>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer3.Engine.FileSystemInterface.IsWritingInWrongPlace(System.Int64)">
            <summary>
            Writing at position &lt; DATABASE_HEADER_PROTECTED_ZONE_SIZE is writing in
            ODB Header place.
            </summary>
            <remarks>
            Writing at position &lt; DATABASE_HEADER_PROTECTED_ZONE_SIZE is writing in
            ODB Header place. Here we check the positions where the writing is done.
            Search for 'page format' in ODB wiki to understand the positions
            </remarks>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer3.Engine.FileSystemInterface.EnsureSpaceFor(System.Int64,NeoDatis.Odb.Core.Layers.Layer2.Meta.ODBType)">
            <summary>
            Reserve space in the file when it is at the end of the file Used in
            transaction mode where real write will happen later
            </summary>
            <param name="quantity">The number of object to reserve space for</param>
            <param name="type">The type of the object to reserve space for</param>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer3.Engine.IByteArrayConverter.StringToByteArray(System.String,System.Boolean,System.Int32,System.Boolean)">
            <param name="s"></param>
            <param name="withSize">if true, returns an array with an initial int with its size
            	</param>
            <param name="totalSpace">The total space of the string (can be bigger that the real string size - to support later in place update)
            	</param>
            <param name="withEncoding">To specify if SPECIFIC encoding must be used</param>
            <returns>The byte array that represent the string</returns>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer3.Engine.IByteArrayConverter.ByteArrayToString(System.Byte[],System.Boolean,System.Boolean)">
            <param name="bytes"></param>
            <param name="hasSize">If hasSize is true, the first four bytes are the size of the string
            	</param>
            <returns>The String represented by the byte array</returns>
            <exception cref="!:Java.IO.UnsupportedEncodingException">Java.IO.UnsupportedEncodingException
            	</exception>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer3.Engine.IByteArrayConverter.IntToByteArray(System.Int32,System.Byte[],System.Int32)">
            <summary>This method writes the byte directly to the array parameter</summary>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer3.Engine.IByteArrayConverter.LongToByteArray(System.Int64,System.Byte[],System.Int32)">
            <summary>This method writes the byte directly to the array parameter</summary>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer3.Engine.IByteArrayConverter.BooleanToByteArray(System.Boolean,System.Byte[],System.Int32)">
            <param name="b"></param>
            <param name="bytes"></param>
            <param name="i"></param>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer3.Engine.IByteArrayConverter.TestEncoding(System.String)">
            <exception cref="!:Java.IO.UnsupportedEncodingException"></exception>
        </member>
        <member name="T:NeoDatis.Odb.Core.Layers.Layer3.IBaseIdentification">
            <summary>An interface to get info about database parameters</summary>
            <author>osmadja</author>
        </member>
        <member name="T:NeoDatis.Odb.Core.Layers.Layer3.IBufferedIO">
            <summary>The interface for buffered IO</summary>
            <author>osmadja</author>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer3.IBufferedIO.ManageBufferForNewPosition(System.Int64,System.Int32,System.Int32)">
            <summary>
            Checks if the new position is in the buffer, if not, flushes the buffer
            and rebuilds it to the correct position
            </summary>
            <param name="newPosition"></param>
            <param name="readOrWrite"></param>
            <param name="size">Size if the data that must be stored</param>
            <returns>The index of the buffer where that contains the position</returns>
        </member>
        <member name="T:NeoDatis.Odb.Core.Layers.Layer3.IDTypes">
            <summary>ID types are used for classes(class id) and objects(Object Id) to specify the type of the id in the ID blocks
            	</summary>
            <author>osmadja</author>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer3.IIdManager.GetNextObjectId(System.Int64)">
            <summary>Gets an id for an object (instance)</summary>
            <param name="objectPosition">the object position (instance)</param>
            <returns>The id</returns>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer3.IIdManager.GetNextClassId(System.Int64)">
            <summary>Gets an id for a class</summary>
            <param name="objectPosition">the object position (class)</param>
            <returns>The id</returns>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer3.IIdManager.MustShift">
            <summary>To check if the id block must shift: that a new id block must be created
            	</summary>
            <returns>a boolean value to check if block of id is full</returns>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer3.IObjectReader.ReadDatabaseHeader(System.String,System.String)">
            <summary>Reads the database header</summary>
            <param name="user"></param>
            <param name="password"></param>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer3.IObjectReader.ReadMetaModel(NeoDatis.Odb.Core.Layers.Layer2.Meta.MetaModel,System.Boolean)">
            <summary>Reads the database meta model</summary>
            <param name="metaModel">An empty meta model</param>
            <param name="full">To indicate if a full read must be done</param>
            <returns>The modified metamodel</returns>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer3.IObjectReader.ReadObjectInfoValuesFromOID(NeoDatis.Odb.Core.Layers.Layer2.Meta.ClassInfo,NeoDatis.Odb.OID,System.Boolean,NeoDatis.Tool.Wrappers.List.IOdbList{System.String},NeoDatis.Tool.Wrappers.List.IOdbList{System.String},System.Int32,System.String[])">
            <summary>reads some attributes of an object.</summary>
            <remarks>
            reads some attributes of an object.
            <pre>
            example of method call
            readObjectInfoValues(classinfo,18000,true,[&quot;profile.name&quot;,&quot;profile.email&quot;],[&quot;profile.name&quot;,&quot;profile.email&quot;],0)
            readObjectInfoValues(classinfo,21789,true,[&quot;name&quot;],[&quot;profile.name&quot;],1)
            </pre>
            </remarks>
            <param name="classInfo">
            If null, we are probably reading a native instance : String
            for example
            </param>
            <param name="oid">
            The oid of the object to read. if -1,the read will be done by
            position
            </param>
            <param name="useCache">
            To indicate if cache must be used. If not, the old version of
            the object will read
            </param>
            <param name="attributeNames">
            The names of attributes to read the values, an attributename
            can contain relation like profile.name
            </param>
            <param name="relationAttributeNames">
            The original names of attributes to read the values, an
            attributename can contain relation like profile.name
            </param>
            <param name="recursionLevel">The recursion level of this method call</param>
            <returns>The map with attribute values</returns>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer3.IObjectReader.GetIdOfObjectAt(System.Int64,System.Boolean)">
            <summary>Returns the id of an object by reading the object header</summary>
            <param name="position"></param>
            <param name="includeDeleted"></param>
            <returns>The oid of the object at the specific position</returns>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer3.IObjectReader.GetObjects``1(NeoDatis.Odb.Core.Query.IQuery,System.Boolean,System.Int32,System.Int32)">
            <summary>Get a list of object matching the query</summary>
            <param name="query"></param>
            <param name="inMemory"></param>
            <param name="startIndex"></param>
            <param name="endIndex"></param>
            <returns>The list of objects</returns>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer3.IObjectReader.GetValues(NeoDatis.Odb.Core.Query.IValuesQuery,System.Int32,System.Int32)">
            <summary>Get a list of values matching the query</summary>
            <param name="query"></param>
            <param name="startIndex"></param>
            <param name="endIndex"></param>
            <returns>The list of values</returns>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer3.IObjectReader.GetObjectInfos``1(NeoDatis.Odb.Core.Query.IQuery,System.Boolean,System.Int32,System.Int32,System.Boolean,NeoDatis.Odb.Core.Query.Execution.IMatchingObjectAction)">
            <summary>Return Objects.</summary>
            <remarks>
            Return Objects. Match the query without instantiating objects. Only
            instantiate object for object that match the query
            </remarks>
            <param name="query">The query to select objects</param>
            <param name="inMemory">To indicate if object must be all loaded in memory</param>
            <param name="startIndex">First object index</param>
            <param name="endIndex">Last object index</param>
            <param name="returnObjects">To indicate if object instances must be created</param>
            <returns>The list of objects</returns>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer3.IObjectReader.ReadObjectInfoHeaderFromOid(NeoDatis.Odb.OID,System.Boolean)">
            <summary>Reads the pointers(ids or positions) of an object that has the specific oid
            	</summary>
            <param name="oid">The oid of the object we want to read the pointers</param>
            <returns>The ObjectInfoHeader</returns>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer3.IObjectReader.GetAllIds(System.Byte)">
            <summary>Returns information about all OIDs of the database</summary>
            <param name="idType"></param>
            <returns></returns>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer3.IObjectReader.GetNextObjectOID(NeoDatis.Odb.OID)">
            <summary>Gets the next object oid of the object with the specific oid</summary>
            <param name="oid"></param>
            <returns>
            The oid of the next object. If there is no next object,
            return null
            </returns>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer3.IObjectReader.GetObjectPositionFromItsOid(NeoDatis.Odb.OID,System.Boolean,System.Boolean)">
            <summary>Gets the real object position from its OID</summary>
            <param name="oid">
            The oid of the object to get the position
            To indicate if an exception must be thrown if object is not
            found
            </param>
            <returns>
            The object position, if object has been marked as deleted then
            return StorageEngineConstant.DELETED_OBJECT_POSITION
            </returns>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer3.IObjectReader.ReadNonNativeObjectInfoFromPosition(NeoDatis.Odb.Core.Layers.Layer2.Meta.ClassInfo,NeoDatis.Odb.OID,System.Int64,System.Boolean,System.Boolean)">
            <summary>Reads a non non native Object Info (Layer2) from its position</summary>
            <param name="classInfo"></param>
            <param name="oid">can be null</param>
            <param name="position"></param>
            <param name="useCache"></param>
            <param name="returnInstance"></param>
            <returns>The meta representation of the object</returns>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer3.IObjectWriter.WriteClassInfoHeader(NeoDatis.Odb.Core.Layers.Layer2.Meta.ClassInfo,System.Int64,System.Boolean)">
            <summary>Write the class info header to the database file</summary>
            <param name="classInfo">The class info to be written</param>
            <param name="position">The position at which it must be written</param>
            <param name="writeInTransaction">
            true if the write must be done in transaction, false to write
            directly
            </param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:NeoDatis.Odb.Core.Layers.Layer3.IObjectWriter.UpdateNonNativeObjectInfo(NeoDatis.Odb.Core.Layers.Layer2.Meta.NonNativeObjectInfo,System.Boolean)" -->
        <member name="M:NeoDatis.Odb.Core.Layers.Layer3.IObjectWriter.WriteNonNativeObjectInfo(NeoDatis.Odb.OID,NeoDatis.Odb.Core.Layers.Layer2.Meta.NonNativeObjectInfo,System.Int64,System.Boolean,System.Boolean)">
            <summary>Write an object representation to database file</summary>
            <param name="existingOid">The oid of the object, can be null</param>
            <param name="objectInfo">The Object meta representation</param>
            <param name="position">The position where the object must be written, can be -1</param>
            <param name="writeDataInTransaction">To indicate if the write must be done in or out of transaction
            	</param>
            <returns>The oid of the object</returns>
            <exception cref="T:System.Exception">System.Exception</exception>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer3.IObjectWriter.CreateEmptyDatabaseHeader(System.Int64,System.String,System.String)">
            <summary>Creates the header of the file</summary>
            <param name="creationDate">The creation date</param>
            <param name="user">The user</param>
            <param name="password">The password</param>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer3.IObjectWriter.MarkAsDeleted(System.Int64,NeoDatis.Odb.OID,System.Boolean)">
            <summary>Mark a block as deleted</summary>
            <returns>The block size</returns>
            <param name="currentPosition"></param>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer3.IObjectWriter.ManageIndexesForInsert(NeoDatis.Odb.OID,NeoDatis.Odb.Core.Layers.Layer2.Meta.NonNativeObjectInfo)">
            <summary>Insert the object in the index</summary>
            <param name="oid">The object id</param>
            <param name="nnoi">The object meta represenation</param>
            <returns>The number of indexes</returns>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer3.IObjectWriter.ManageIndexesForDelete(NeoDatis.Odb.OID,NeoDatis.Odb.Core.Layers.Layer2.Meta.NonNativeObjectInfo)">
            <summary>Insert the object in the index</summary>
            <param name="oid">The object id</param>
            <param name="nnoi">The object meta represenation</param>
            <returns>The number of indexes</returns>
            <exception cref="T:System.Exception">System.Exception</exception>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer3.IObjectWriter.WriteLastODBCloseStatus(System.Boolean,System.Boolean)">
            <summary>Write the status of the last odb close</summary>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer3.IObjectWriter.UpdateObjectPositionForObjectOIDWithPosition(System.Int64,System.Int64,System.Boolean)">
            <summary>Updates the real object position of the object OID</summary>
            <param name="idPosition">The OID position</param>
            <param name="objectPosition">The real object position</param>
            <param name="writeInTransaction">To indicate if write must be done in transaction
            	</param>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer3.IObjectWriter.UpdateClassPositionForClassOIDWithPosition(System.Int64,System.Int64,System.Boolean)">
            <summary>Udates the real class positon of the class OID</summary>
            <param name="idPosition"></param>
            <param name="objectPosition"></param>
            <param name="writeInTransaction"></param>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer3.IObjectWriter.AssociateIdToObject(System.Byte,System.Byte,System.Int64,NeoDatis.Odb.OID,System.Int64,System.Boolean)">
            <summary>Associate an object OID to its position</summary>
            <param name="idType">The type : can be object or class</param>
            <param name="idStatus">The status of the OID</param>
            <param name="currentBlockIdPosition">The current OID block position</param>
            <param name="oid">The OID</param>
            <param name="objectPosition">The position</param>
            <param name="writeInTransaction">To indicate if write must be executed in transaction
            	</param>
            <returns></returns>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer3.IObjectWriter.MarkIdBlockAsFull(System.Int64,System.Int64,System.Boolean)">
            <summary>
            Marks a block of type id as full, changes the status and the next block
            position
            </summary>
            <param name="blockPosition"></param>
            <param name="nextBlockPosition"></param>
            <param name="writeInTransaction"></param>
            <returns>The block position</returns>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer3.IObjectWriter.WriteIdBlock(System.Int64,System.Int32,System.Byte,System.Int32,System.Int64,System.Boolean)">
            <summary>
            Writes the header of a block of type ID - a block that contains ids of
            objects and classes
            </summary>
            <param name="position">
            Position at which the block must be written, if -1, take the
            next available position
            </param>
            <param name="idBlockSize">The block size in byte</param>
            <param name="blockStatus">The block status</param>
            <param name="blockNumber">The number of the block</param>
            <param name="previousBlockPosition">The position of the previous block of the same type
            	</param>
            <param name="writeInTransaction">To indicate if write must be done in transaction
            	</param>
            <returns>The position of the id</returns>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer3.IObjectWriter.UpdatePreviousObjectFieldOfObjectInfo(NeoDatis.Odb.OID,NeoDatis.Odb.OID,System.Boolean)">
            <summary>
            Updates the previous object position field of the object at
            objectPosition
            </summary>
            <param name="objectOID"></param>
            <param name="previousObjectOID"></param>
            <param name="writeInTransaction"></param>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer3.IObjectWriter.UpdateNextObjectFieldOfObjectInfo(NeoDatis.Odb.OID,NeoDatis.Odb.OID,System.Boolean)">
            <summary>Update next object oid field of the object at the specific position</summary>
            <param name="objectOID"></param>
            <param name="nextObjectOID"></param>
            <param name="writeInTransaction"></param>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer3.IObjectWriter.UpdateInstanceFieldsOfClassInfo(NeoDatis.Odb.Core.Layers.Layer2.Meta.ClassInfo,System.Boolean)">
            <summary>
            Updates the instance related field of the class info into the database
            file Updates the number of objects, the first object oid and the next
            class oid
            </summary>
            <param name="classInfo">The class info to be updated</param>
            <param name="writeInTransaction">To specify if it must be part of a transaction</param>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer3.IObjectWriter.PersistClass(NeoDatis.Odb.Core.Layers.Layer2.Meta.ClassInfo,System.Int32,System.Boolean,System.Boolean)">
            <summary>Persist a single class info - This method is used by the XML Importer.</summary>
            <remarks>Persist a single class info - This method is used by the XML Importer.</remarks>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer3.IObjectWriter.InsertNonNativeObject(NeoDatis.Odb.OID,NeoDatis.Odb.Core.Layers.Layer2.Meta.NonNativeObjectInfo,System.Boolean)">
            <param name="oid">The Oid of the object to be inserted</param>
            <param name="nnoi">
            The object meta representation The object to be inserted in
            the database
            </param>
            <param name="isNewObject">To indicate if object is new</param>
            <returns>The position of the inserted object</returns>
        </member>
        <member name="T:NeoDatis.Odb.Core.Layers.Layer3.IObjectWriterCallback">
            <summary>A callback interface - not used</summary>
            <author>osmadja</author>
        </member>
        <member name="T:NeoDatis.Odb.Core.Layers.Layer3.IOFileParameter">
            <summary>Database Parameters for local database access</summary>
            <author>osmadja</author>
        </member>
        <member name="T:NeoDatis.Odb.Core.Layers.Layer3.IOSocketParameter">
            <summary>To express parameters that must be passed to a remote server.</summary>
            <remarks>
            To express parameters that must be passed to a remote server.
            If base id is defined then filename is null. If filename is defined, then baseId is null
            </remarks>
            <author>osmadja</author>
        </member>
        <member name="F:NeoDatis.Odb.Core.Layers.Layer3.IOSocketParameter.dateTimeCreation">
            <summary>Used for TYPE_TRANSACTION, to buld the entire transaction file name</summary>
        </member>
        <member name="F:NeoDatis.Odb.Core.Layers.Layer3.IOSocketParameter.clientAndServerRunInSameVM">
            <summary>To know if client runs on the same vm than the server.</summary>
            <remarks>
            To know if client runs on the same vm than the server. It is the case, we client / server communication
            can be optimized.
            </remarks>
        </member>
        <member name="T:NeoDatis.Odb.Core.Layers.Layer3.IRefactorManager">
            <summary>
            <p>
            An interface for refactoring
            </p>
            </summary>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer3.IRefactorManager.RenameClass(System.String,System.String)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer3.IRefactorManager.RenameField(System.String,System.String,System.String)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:NeoDatis.Odb.Core.Layers.Layer3.IRefactorManager.RemoveField(System.String,System.String)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="T:NeoDatis.Odb.Core.Lookup.ILookup">
            <author>olivier</author>
        </member>
        <member name="T:NeoDatis.Odb.Core.Lookup.LookupFactory">
            <author>olivier</author>
        </member>
        <member name="T:NeoDatis.Odb.Core.Lookup.LookupImpl">
            <summary>A simple class to enable direct object lookup by object id</summary>
            <author>olivier</author>
        </member>
        <!-- Badly formed XML comment ignored for member "T:NeoDatis.Odb.Core.NeoDatisError" -->
        <member name="M:NeoDatis.Odb.Core.NeoDatisError.ToString">
            <summary>replace the @1,@2,...</summary>
            <remarks>replace the @1,@2,... by their real values.</remarks>
        </member>
        <member name="T:NeoDatis.Odb.Core.OrderByConstants">
            <summary>
            Some constants used for ordering queries and creating ordered collection
            iterators
            </summary>
            <author>osmadja</author>
        </member>
        <member name="M:NeoDatis.Odb.Core.Query.IQuery.OrderByDesc(System.String)">
            <summary>To order by the result of a query in descendent order</summary>
            <param name="fields">A comma separated field list</param>
            <returns>this</returns>
        </member>
        <member name="M:NeoDatis.Odb.Core.Query.IQuery.OrderByAsc(System.String)">
            <summary>To order by the result of a query in ascendent order</summary>
            <param name="fields">A comma separated field list</param>
            <returns>this</returns>
        </member>
        <member name="M:NeoDatis.Odb.Core.Query.IQuery.HasOrderBy">
            <summary>Returns true if the query has an order by clause</summary>
            <returns>true if has an order by flag</returns>
        </member>
        <member name="M:NeoDatis.Odb.Core.Query.IQuery.GetOrderByFieldNames">
            <summary>Returns the field names of the order by</summary>
            <returns>The array of  fields of the order by</returns>
        </member>
        <member name="M:NeoDatis.Odb.Core.Query.IQuery.GetOrderByType">
            <returns>the type of the order by - ORDER_BY_NONE,ORDER_BY_DESC,ORDER_BY_ASC</returns>
        </member>
        <member name="M:NeoDatis.Odb.Core.Query.IQuery.SetPolymorphic(System.Boolean)">
            <summary>
            To specify that instances of subclass of the query class must not be load
            if true, when querying objects of class Class1, only direct instances of Class1 will be loaded.
            </summary>
            <remarks>
            To specify that instances of subclass of the query class must not be load
            if true, when querying objects of class Class1, only direct instances of Class1 will be loaded.
            If false, when querying objects of class Class1, direct instances of Class1 will be loaded and all instances of subclasses of Class1.
            </remarks>
        </member>
        <member name="M:NeoDatis.Odb.Core.Query.IQuery.IsForSingleOid">
            <summary>To indicate if a query must be executed on a single object with the specific OID.
            	</summary>
            <remarks>To indicate if a query must be executed on a single object with the specific OID. Used for ValuesQeuries
            	</remarks>
            <returns></returns>
        </member>
        <member name="M:NeoDatis.Odb.Core.Query.IQuery.GetOidOfObjectToQuery">
            <summary>used with isForSingleOid == true, to indicate we are working on a single object with a specific oid
            	</summary>
            <returns></returns>
        </member>
        <member name="F:NeoDatis.Odb.Core.Query.AbstractQuery.oidOfObjectToQuery">
            <summary>The OID attribute is used when the query must be restricted the object with this OID
            	</summary>
        </member>
        <member name="M:NeoDatis.Odb.Core.Query.AbstractQuery.IsForSingleOid">
            <summary>Returns true is query must apply on a single object OID</summary>
        </member>
        <member name="T:NeoDatis.Odb.Core.Query.ComposedCompareKey">
            <summary>
            A composed key : an object that contains various values used for indexing query result
            <p>
            This is an implementation that allows compare keys to contain more than one single value to be compared
            </p>
            </summary>
        </member>
        <member name="T:NeoDatis.Odb.Core.Query.Criteria.AbstractCriterion">
            <summary>An adapter for Criterion.</summary>
            <remarks>An adapter for Criterion.</remarks>
            <author>olivier s</author>
        </member>
        <member name="T:NeoDatis.Odb.Core.Query.Criteria.ICriterion">
            <author>
            olivier
            An interface for all criteria
            </author>
        </member>
        <member name="M:NeoDatis.Odb.Core.Query.Criteria.ICriterion.Match(System.Object)">
            <summary>To check if an object matches this criterion</summary>
            <param name="@object"></param>
            <returns>true if object matches the criteria</returns>
        </member>
        <member name="M:NeoDatis.Odb.Core.Query.Criteria.ICriterion.GetAllInvolvedFields">
            <summary>to be able to optimize query execution.</summary>
            <remarks>to be able to optimize query execution. Get only the field involved in the query instead of getting all the object
            	</remarks>
            <returns>All involved fields in criteria, List of String</returns>
        </member>
        <member name="M:NeoDatis.Odb.Core.Query.Criteria.ICriterion.GetQuery">
            <summary>Gets thes whole query</summary>
            <returns>The owner query</returns>
        </member>
        <member name="M:NeoDatis.Odb.Core.Query.Criteria.ICriterion.Ready">
            <summary>a method to explicitly indicate that the criteria is ready.</summary>
            <remarks>a method to explicitly indicate that the criteria is ready.</remarks>
        </member>
        <member name="F:NeoDatis.Odb.Core.Query.Criteria.AbstractCriterion.query">
            <summary>The query containing the criterion</summary>
        </member>
        <member name="F:NeoDatis.Odb.Core.Query.Criteria.AbstractCriterion.attributeName">
            <summary>The name of the attribute involved by this criterion</summary>
        </member>
        <member name="M:NeoDatis.Odb.Core.Query.Criteria.AbstractCriterion.GetQuery">
            <summary>Gets thes whole query</summary>
            <returns>The owner query</returns>
        </member>
        <member name="M:NeoDatis.Odb.Core.Query.Criteria.AbstractCriterion.GetAttributeName">
            <returns>The attribute involved in the criterion</returns>
        </member>
        <member name="M:NeoDatis.Odb.Core.Query.Criteria.AbstractCriterion.GetAllInvolvedFields">
            <summary>An abstract criterion only restrict one field =&gt; it returns a list of one field!
            	</summary>
            <returns>The list of involved field of the criteria</returns>
        </member>
        <member name="M:NeoDatis.Odb.Core.Query.Criteria.AbstractExpression.GetQuery">
            <summary>Gets thes whole query</summary>
            <returns>The owner query</returns>
        </member>
        <member name="T:NeoDatis.Odb.Core.Query.Criteria.ComparisonCriterion">
            <summary>A Criterion for greater than (gt),greater or equal(ge), less than (lt) and less or equal (le)
            	</summary>
            <author>olivier s</author>
        </member>
        <member name="T:NeoDatis.Odb.Core.Query.Criteria.ISingleCriterion">
            <author>
            olivier
            An interface for all criteria
            </author>
        </member>
        <member name="M:NeoDatis.Odb.Core.Query.Criteria.ISingleCriterion.GetAttributeNames">
            <summary>Returns a list of attributes names that are involved in the query</summary>
            <returns>The attribute names</returns>
        </member>
        <member name="T:NeoDatis.Odb.Core.Query.Criteria.Where">
            <summary>A simple factory to build all Criterion and Expression</summary>
            <author>olivier s</author>
        </member>
        <member name="M:NeoDatis.Odb.Core.Query.Criteria.Where.Equal(System.String,System.Boolean)">
            <param name="attributeName">The attribute name</param>
            <param name="value">The boolean value</param>
            <returns>The criteria</returns>
        </member>
        <member name="M:NeoDatis.Odb.Core.Query.Criteria.Where.Like(System.String,System.String)">
            <summary>LIKE</summary>
            <param name="attributeName">The attribute name</param>
            <param name="value">The string value</param>
            <returns>The criterio</returns>
        </member>
        <member name="M:NeoDatis.Odb.Core.Query.Criteria.Where.Gt(System.String,System.IComparable)">
            <summary>GREATER THAN</summary>
            <param name="attributeName"></param>
            <param name="value"></param>
            <returns>The criterion</returns>
        </member>
        <member name="M:NeoDatis.Odb.Core.Query.Criteria.Where.Ge(System.String,System.IComparable)">
            <summary>GREATER OR EQUAL</summary>
            <param name="attributeName"></param>
            <param name="value"></param>
            <returns>The criterion</returns>
        </member>
        <member name="M:NeoDatis.Odb.Core.Query.Criteria.Where.Lt(System.String,System.IComparable)">
            <summary>LESS THAN</summary>
            <param name="attributeName"></param>
            <param name="value"></param>
            <returns>The criterion</returns>
        </member>
        <member name="M:NeoDatis.Odb.Core.Query.Criteria.Where.Le(System.String,System.IComparable)">
            <summary>LESS OR EQUAL</summary>
            <param name="attributeName">The attribute name</param>
            <param name="value">The value</param>
            <returns>The criterion</returns>
        </member>
        <member name="M:NeoDatis.Odb.Core.Query.Criteria.Where.Contain(System.String,System.Boolean)">
            <summary>The</summary>
            <param name="attributeName">The attribute name</param>
            <param name="value">The value</param>
            <returns>The criterion</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:NeoDatis.Odb.Core.Query.Execution.GenericQueryExecutor" -->
        <member name="M:NeoDatis.Odb.Core.Query.Execution.IQueryExecutor.Execute``1(System.Boolean,System.Int32,System.Int32,System.Boolean,NeoDatis.Odb.Core.Query.Execution.IMatchingObjectAction)">
            <summary>The main query execution method</summary>
            <param name="inMemory"></param>
            <param name="startIndex"></param>
            <param name="endIndex"></param>
            <param name="returnObjects"></param>
            <param name="queryResultAction"></param>
            <returns></returns>
            <exception cref="T:System.Exception">System.Exception</exception>
        </member>
        <member name="M:NeoDatis.Odb.Core.Query.Execution.IMultiClassQueryExecutor.ExecuteStartAndEndOfQueryAction">
            <summary>Used to indicate if the execute method must call start and end method of the queryResultAction.
            	</summary>
            <remarks>
            Used to indicate if the execute method must call start and end method of the queryResultAction. The default is yes.
            For MultiClass Query executor, it is set to false to avoid to reset the result
            </remarks>
            <returns>true or false to indicate if start and end method of queryResultAction must be executed
            	</returns>
        </member>
        <member name="M:NeoDatis.Odb.Core.Query.Execution.IMultiClassQueryExecutor.SetClassInfo(NeoDatis.Odb.Core.Layers.Layer2.Meta.ClassInfo)">
            <summary>The class on which to execute the query</summary>
        </member>
        <member name="F:NeoDatis.Odb.Core.Query.Execution.GenericQueryExecutor.storageEngine">
            <summary>The storage engine</summary>
        </member>
        <member name="F:NeoDatis.Odb.Core.Query.Execution.GenericQueryExecutor.query">
            <summary>The query being executed</summary>
        </member>
        <member name="F:NeoDatis.Odb.Core.Query.Execution.GenericQueryExecutor.classInfo">
            <summary>The class of the object being fetched</summary>
        </member>
        <member name="F:NeoDatis.Odb.Core.Query.Execution.GenericQueryExecutor.objectReader">
            <summary>The object used to read object data from database</summary>
        </member>
        <member name="F:NeoDatis.Odb.Core.Query.Execution.GenericQueryExecutor.session">
            <summary>The current database session</summary>
        </member>
        <member name="F:NeoDatis.Odb.Core.Query.Execution.GenericQueryExecutor.nextOID">
            <summary>The next object position</summary>
        </member>
        <member name="F:NeoDatis.Odb.Core.Query.Execution.GenericQueryExecutor.queryHasOrderBy">
            <summary>A boolean to indicate if query must be ordered</summary>
        </member>
        <member name="F:NeoDatis.Odb.Core.Query.Execution.GenericQueryExecutor.orderByKey">
            <summary>The key for ordering</summary>
        </member>
        <member name="F:NeoDatis.Odb.Core.Query.Execution.GenericQueryExecutor.executeStartAndEndOfQueryAction">
            <summary>
            Used for multi class executor to indicate not to execute start and end
            method of query result action
            </summary>
        </member>
        <member name="M:NeoDatis.Odb.Core.Query.Execution.GenericQueryExecutor.GetCurrentObjectMetaRepresentation">
            <summary>This can be a NonNAtiveObjectInf or AttributeValuesMap</summary>
            <returns></returns>
        </member>
        <member name="M:NeoDatis.Odb.Core.Query.Execution.GenericQueryExecutor.MatchObjectWithOid(NeoDatis.Odb.OID,System.Boolean,System.Boolean)">
            <summary>
            Check if the object with oid matches the query, returns true
            This method must compute the next object oid and the orderBy key if it
            exists!
            </summary>
            <param name="oid">The object position</param>
            <param name="loadObjectInfo">
            To indicate if object must loaded (when the query indicator
            'in memory' is false, we do not need to load object, only ids)
            </param>
            <param name="inMemory">To indicate if object must be actually loaded to memory</param>
        </member>
        <member name="M:NeoDatis.Odb.Core.Query.Execution.GenericQueryExecutor.ExecuteFullScan``1(System.Boolean,System.Int32,System.Int32,System.Boolean,NeoDatis.Odb.Core.Query.Execution.IMatchingObjectAction)">
            <summary>
            Query execution full scan
            <pre>
            startIndex &amp; endIndex
            A B C D E F G H I J K L
            [1,3] : nb &gt;=1 &amp;&amp; nb&lt;3
            1)
            analyze A
            nb = 0
            nb E [1,3] ? no
            r=[]
            2)
            analyze B
            nb = 1
            nb E [1,3] ? yes
            r=[B]
            3) analyze C
            nb = 2
            nb E [1,3] ? yes
            r=[B,C]
            4) analyze C
            nb = 3
            nb E [1,3] ? no and 3&gt; upperBound([1,3]) =&gt; exit
            </pre>
            </summary>
            <param name="inMemory"></param>
            <param name="startIndex"></param>
            <param name="endIndex"></param>
            <param name="returnObjects"></param>
            <returns></returns>
            <exception cref="T:System.Exception">System.Exception</exception>
        </member>
        <member name="M:NeoDatis.Odb.Core.Query.Execution.GenericQueryExecutor.ExecuteUsingIndex``1(NeoDatis.Odb.Core.Layers.Layer2.Meta.ClassInfoIndex,System.Boolean,System.Int32,System.Int32,System.Boolean,NeoDatis.Odb.Core.Query.Execution.IMatchingObjectAction)">
            <summary>Execute query using index</summary>
            <param name="index"></param>
            <param name="inMemory"></param>
            <param name="startIndex"></param>
            <param name="endIndex"></param>
            <param name="returnObjects"></param>
            <returns></returns>
            <exception cref="T:System.Exception">System.Exception</exception>
        </member>
        <member name="M:NeoDatis.Odb.Core.Query.Execution.GenericQueryExecutor.ExecuteForOneOid``1(System.Boolean,System.Boolean,NeoDatis.Odb.Core.Query.Execution.IMatchingObjectAction)">
            <summary>Execute query using index</summary>
            <param name="inMemory"></param>
            <param name="returnObjects"></param>
            <returns></returns>
            <exception cref="T:System.Exception">System.Exception</exception>
        </member>
        <member name="M:NeoDatis.Odb.Core.Query.Execution.GenericQueryExecutor.BuildOrderByKey(System.Object)">
            <summary>TODO very bad.</summary>
            <remarks>TODO very bad. Should remove the instanceof</remarks>
            <param name="@object"></param>
            <returns></returns>
        </member>
        <member name="T:NeoDatis.Odb.Core.Query.Execution.IMatchingObjectAction">
            <summary>The interface used to implement the classes that are called by the generic query executor when an object matches the query
            	</summary>
            <author>osmadja</author>
        </member>
        <member name="M:NeoDatis.Odb.Core.Query.Execution.IMatchingObjectAction.Start">
            <summary>Called at the beginning of the query execution - used to prepare result object
            	</summary>
        </member>
        <member name="M:NeoDatis.Odb.Core.Query.Execution.IMatchingObjectAction.ObjectMatch(NeoDatis.Odb.OID,NeoDatis.Tool.Wrappers.OdbComparable)">
            <summary>Called (by the GenericQueryExecutor) when an object matches with lazy loading, only stores the OID
            	</summary>
        </member>
        <member name="M:NeoDatis.Odb.Core.Query.Execution.IMatchingObjectAction.ObjectMatch(NeoDatis.Odb.OID,System.Object,NeoDatis.Tool.Wrappers.OdbComparable)">
            <summary>Called (by the GenericQueryExecutor) when an object matches the query</summary>
        </member>
        <member name="M:NeoDatis.Odb.Core.Query.Execution.IMatchingObjectAction.End">
            <summary>Called at the end of the query execution - used to clean or finish some task
            	</summary>
        </member>
        <member name="M:NeoDatis.Odb.Core.Query.Execution.IMatchingObjectAction.GetObjects``1">
            <summary>Returns the resulting objects</summary>
        </member>
        <member name="M:NeoDatis.Odb.Core.Query.Execution.IndexTool.ComputeKey(NeoDatis.Odb.Core.Layers.Layer2.Meta.ClassInfo,NeoDatis.Odb.Core.Layers.Layer2.Meta.ClassInfoIndex,NeoDatis.Odb.Impl.Core.Query.Criteria.CriteriaQuery)">
            <summary>Take the fields of the index and take value from the query</summary>
            <param name="ci">The class info involved</param>
            <param name="index">The index</param>
            <param name="query"></param>
            <returns>The key of the index</returns>
        </member>
        <member name="T:NeoDatis.Odb.Core.Query.Execution.IQueryFieldAction">
            <summary>Used to implement generic action on matching object.</summary>
            <remarks>
            Used to implement generic action on matching object. The Generic query executor is responsible for checking if an object meets the criteria conditions.
            Then an(some) object actions are called to execute what must be done with matching objects. A ValuesQuery can contain more than
            one QueryFieldAction.
            </remarks>
            <author>osmadja</author>
        </member>
        <member name="M:NeoDatis.Odb.Core.Query.Execution.IQueryFieldAction.IsMultiRow">
            <summary>To indicate if a query will return one row (for example, sum, average, max and min, or will return more than one row
            	</summary>
        </member>
        <member name="M:NeoDatis.Odb.Core.Query.Execution.IQueryFieldAction.Copy">
            <summary>used to create a copy!</summary>
        </member>
        <member name="M:NeoDatis.Odb.Core.Query.Execution.IQueryFieldAction.SetReturnInstance(System.Boolean)">
            <param name="returnInstance"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "T:NeoDatis.Odb.Core.Query.Execution.MultiClassGenericQueryExecutor" -->
        <member name="M:NeoDatis.Odb.Core.Query.Execution.MultiClassGenericQueryExecutor.Execute``1(System.Boolean,System.Int32,System.Int32,System.Boolean,NeoDatis.Odb.Core.Query.Execution.IMatchingObjectAction)">
            <summary>The main query execution method</summary>
            <param name="query"></param>
            <param name="inMemory"></param>
            <param name="startIndex"></param>
            <param name="endIndex"></param>
            <param name="returnObjects"></param>
            <returns></returns>
            <exception cref="T:System.Exception">System.Exception</exception>
        </member>
        <member name="M:NeoDatis.Odb.Core.Query.IValuesQuery.GetObjectActions">
            <summary>A collection of IQueryFieldAction</summary>
        </member>
        <member name="M:NeoDatis.Odb.Core.Query.IValuesQuery.IsMultiRow">
            <summary>To indicate if a query will return one row (for example, sum, average, max and min, or will return more than one row
            	</summary>
        </member>
        <member name="M:NeoDatis.Odb.Core.Query.IValuesQuery.ReturnInstance">
            <returns></returns>
        </member>
        <member name="M:NeoDatis.Odb.Core.Query.IValuesQuery.SetReturnInstance(System.Boolean)">
            <summary>To indicate if query execution must build instances or return object representation, Default value is true(return instance)
            	</summary>
        </member>
        <member name="M:NeoDatis.Odb.Core.Query.QueryManager.GetQueryExecutor(NeoDatis.Odb.Core.Query.IQuery,NeoDatis.Odb.Core.Layers.Layer3.IStorageEngine,NeoDatis.Odb.Core.Layers.Layer2.Instance.IInstanceBuilder)">
            <summary>Returns a query executor according to the query type</summary>
            <param name="query"></param>
            <param name="engine"></param>
            <param name="instanceBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:NeoDatis.Odb.Core.Query.QueryManager.GetSingleClassQueryExecutor(NeoDatis.Odb.Core.Query.IQuery,NeoDatis.Odb.Core.Layers.Layer3.IStorageEngine,NeoDatis.Odb.Core.Layers.Layer2.Instance.IInstanceBuilder)">
            <summary>Return a single class query executor (polymorphic = false)</summary>
            <param name="query"></param>
            <param name="engine"></param>
            <param name="instanceBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:NeoDatis.Odb.Core.Query.QueryManager.GetMultiClassQueryExecutor(NeoDatis.Odb.Core.Query.IQuery,NeoDatis.Odb.Core.Layers.Layer3.IStorageEngine,NeoDatis.Odb.Core.Layers.Layer2.Instance.IInstanceBuilder)">
            <summary>Returns a multi class query executor (polymorphic = true)</summary>
            <param name="query"></param>
            <param name="engine"></param>
            <param name="instanceBuilder"></param>
            <returns></returns>
        </member>
        <member name="T:NeoDatis.Odb.Core.Query.SimpleCompareKey">
            <summary>
            A simple compare key : an object that contains various values used for indexing query result
            <p>
            </p>
            </summary>
        </member>
        <member name="T:NeoDatis.Odb.Core.Query.Values.ICustomQueryFieldAction">
            <summary>Used to implement custom query action.</summary>
            <remarks>Used to implement custom query action.</remarks>
            <author>osmadja</author>
        </member>
        <member name="T:NeoDatis.Odb.Core.Server.Connection.ClientServerConnection">
            <summary>The abstract class that manages the client server connections.</summary>
            <remarks>
            The abstract class that manages the client server connections. It is message
            based and it manages all the client server messages.
            </remarks>
            <author>olivier s</author>
        </member>
        <member name="M:NeoDatis.Odb.Core.Server.Connection.ClientServerConnection.ManageMessage(NeoDatis.Odb.Core.Server.Layers.Layer3.Engine.Message)">
            <summary>The main method.</summary>
            <remarks>
            The main method. It is the message dispatcher. Checks the message type
            and calls the right message handler.
            </remarks>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:NeoDatis.Odb.Core.Server.Connection.ClientServerConnection.ManageCheckMetaModelCompatibilityCommand(NeoDatis.Odb.Core.Server.Message.CheckMetaModelCompatibilityMessage)">
            <summary>Used to check if client classes meta model is compatible with the meta model persisted in the database
            	</summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:NeoDatis.Odb.Core.Server.Connection.ClientServerConnection.ManageAddIndexCommand(NeoDatis.Odb.Core.Server.Message.AddIndexMessage)">
            <summary>Manage Index Message</summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:NeoDatis.Odb.Core.Server.Connection.ClientServerConnection.ManageRebuildIndexCommand(NeoDatis.Odb.Core.Server.Message.RebuildIndexMessage)">
            <summary>Rebuild an index Index Message</summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:NeoDatis.Odb.Core.Server.Connection.ClientServerConnection.ManageDeleteIndexCommand(NeoDatis.Odb.Core.Server.Message.DeleteIndexMessage)">
            <summary>Delete an index Index Message</summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:NeoDatis.Odb.Core.Server.Connection.ClientServerConnection.GetConnectionManager(System.String)">
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:NeoDatis.Odb.Core.Server.Connection.ClientServerConnection.GetConnectionManager(System.String,System.String,System.String,System.Boolean)">
            <summary>Gets the connection manager for the base</summary>
            <param name="baseIdentifier"></param>
            <param name="user"></param>
            <param name="password"></param>
            <param name="returnNullIfDoesNotExit"></param>
            <returns></returns>
            <exception cref="T:System.Exception">System.Exception</exception>
        </member>
        <member name="M:NeoDatis.Odb.Core.Server.Connection.ClientServerConnection.ManageCloseCommand(NeoDatis.Odb.Core.Server.Message.CloseMessage)">
            <summary>manages the Close Message</summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:NeoDatis.Odb.Core.Server.Connection.ClientServerConnection.ManageStoreCommand(NeoDatis.Odb.Core.Server.Message.StoreMessage)">
            <summary>manage the store command.</summary>
            <remarks>
            manage the store command. The store command can be an insert(oid==null)
            or an update(oid!=null)
            If insert get the base mutex IF update, first get the mutex of the oid to
            update then get the base mutex, to avoid dead lock in case of concurrent
            update.
            </remarks>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="T:NeoDatis.Odb.Core.Server.Connection.ConnectionAction">
            <summary>A simple class with some constants to describe what a connection is doing
            	</summary>
            <author>osmadja</author>
        </member>
        <member name="M:NeoDatis.Odb.Core.Server.Connection.ConnectionManager.LockOidForConnection(NeoDatis.Odb.OID,NeoDatis.Odb.Core.Server.Connection.IConnection)">
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:NeoDatis.Odb.Core.Server.Connection.ConnectionManager.UnlockOidForConnection(NeoDatis.Odb.OID,NeoDatis.Odb.Core.Server.Connection.IConnection)">
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="T:NeoDatis.Odb.Core.Server.Connection.DefaultConnectionThread">
            <summary>A thread to manage client connections via socket</summary>
            <author>olivier s</author>
        </member>
        <member name="T:NeoDatis.Odb.Core.Server.Connection.IConnection">
            <author>olivier</author>
        </member>
        <member name="M:NeoDatis.Odb.Core.Server.Connection.IConnection.Close">
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:NeoDatis.Odb.Core.Server.Connection.IConnection.Commit">
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:NeoDatis.Odb.Core.Server.Connection.IConnection.UnlockObjectWithOid(NeoDatis.Odb.OID)">
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:NeoDatis.Odb.Core.Server.Connection.IConnection.Rollback">
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:NeoDatis.Odb.Core.Server.Connection.IConnection.LockObjectWithOid(NeoDatis.Odb.OID)">
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="T:NeoDatis.Odb.Core.Server.Connection.SameVmConnectionThread">
            <summary>A class to manage client server connections being executed in the same Vm.
            	</summary>
            <remarks>A class to manage client server connections being executed in the same Vm. In this case, we don't use network IO.
            	</remarks>
            <author>olivier s</author>
        </member>
        <member name="T:NeoDatis.Odb.Core.Server.Layers.Layer3.Engine.IMessageStreamer">
            <author>olivier</author>
        </member>
        <member name="M:NeoDatis.Odb.ODBServer.AddBase(System.String,System.String)">
            <summary>Adds a base to the server.</summary>
            <remarks>
            Adds a base to the server. If the base does not exist, it will be
            created. Can be called after server start.
            </remarks>
            <param name="baseIdentifier">The name that the client must use to reference this base
            	</param>
            <param name="fileName">The physical file name of this base</param>
        </member>
        <member name="M:NeoDatis.Odb.ODBServer.AddBase(System.String,System.String,System.String,System.String)">
            <summary>Adds a base to the server.</summary>
            <remarks>
            Adds a base to the server. If the base does not exist, it will be
            created. Can be called after server start.
            </remarks>
            <param name="baseIdentifier"></param>
            <param name="fileName">The name that the client must use to reference this base</param>
            <param name="user">The user that will be used to open the database</param>
            <param name="password">The password that will be used to open the base</param>
        </member>
        <member name="M:NeoDatis.Odb.ODBServer.AddUserForBase(System.String,System.String,System.String)">
            <summary>Not yet implemented</summary>
            <param name="baseIdentifier"></param>
            <param name="user"></param>
            <param name="password"></param>
        </member>
        <member name="M:NeoDatis.Odb.ODBServer.StartServer(System.Boolean)">
            <summary>actually starts the server.</summary>
            <remarks>
            actually starts the server. Starts listening incoming connections on the
            port.
            </remarks>
            <param name="inThread">
            If true, the server is started in an independent thread for
            listening incoming connections, else it simply executes the
            server (client connection) in the current thread
            </param>
        </member>
        <member name="M:NeoDatis.Odb.ODBServer.Close">
            <summary>Closes the server.</summary>
            <remarks>Closes the server. Closes the socket server and all registered databases.
            	</remarks>
        </member>
        <member name="M:NeoDatis.Odb.ODBServer.AddUpdateTrigger(System.String,System.String,NeoDatis.Odb.Core.Server.Trigger.ServerUpdateTrigger)">
            <summary>Used to add an update trigger callback</summary>
            <param name="trigger"></param>
        </member>
        <member name="M:NeoDatis.Odb.ODBServer.AddInsertTrigger(System.String,System.String,NeoDatis.Odb.Core.Server.Trigger.ServerInsertTrigger)">
            <summary>Used to add an insert trigger callback</summary>
            <param name="trigger"></param>
        </member>
        <member name="M:NeoDatis.Odb.ODBServer.AddDeleteTrigger(System.String,System.String,NeoDatis.Odb.Core.Server.Trigger.ServerDeleteTrigger)">
            <summary>USed to add a delete trigger callback</summary>
            <param name="trigger"></param>
        </member>
        <member name="M:NeoDatis.Odb.ODBServer.AddSelectTrigger(System.String,System.String,NeoDatis.Odb.Core.Server.Trigger.ServerSelectTrigger)">
            <summary>Used to add a select trigger callback</summary>
            <param name="trigger"></param>
        </member>
        <member name="T:NeoDatis.Odb.Core.Server.Layers.Layer3.ServerFileParameter">
            <summary>Database Parameters for local database access</summary>
            <author>osmadja</author>
        </member>
        <member name="T:NeoDatis.Odb.Core.Server.Message.CountMessage">
            <summary>To get the number of objets of a class</summary>
            <author>osmadja</author>
        </member>
        <member name="T:NeoDatis.Odb.Core.Server.Message.CountMessageResponse">
            <summary>A response to a CountMessage command</summary>
            <author>olivier s</author>
        </member>
        <member name="T:NeoDatis.Odb.Core.Server.Message.DeleteBaseMessage">
            <summary>A StoreMessage is used by the Client/Server mode to store an object</summary>
            <author>olivier s</author>
        </member>
        <member name="T:NeoDatis.Odb.Core.Server.Message.DeleteBaseMessageResponse">
            <summary>A StoreMessageResponse is used by the Client/Server mode to answer a StoreMessage
            	</summary>
            <author>olivier s</author>
        </member>
        <member name="T:NeoDatis.Odb.Core.Server.Message.DeleteObjectMessage">
            <summary>A StoreMessage is used by the Client/Server mode to store an object</summary>
            <author>olivier s</author>
        </member>
        <member name="T:NeoDatis.Odb.Core.Server.Message.DeleteObjectMessageResponse">
            <summary>A StoreMessageResponse is used by the Client/Server mode to answer a StoreMessage
            	</summary>
            <author>olivier s</author>
        </member>
        <member name="T:NeoDatis.Odb.Core.Server.Message.GetMessageResponse">
            <summary>A response to a GetMessage comamnd</summary>
            <author>olivier s</author>
        </member>
        <member name="F:NeoDatis.Odb.Core.Server.Message.GetMessageResponse.metaObjects">
            <summary>List of meta representation of the objects</summary>
        </member>
        <member name="T:NeoDatis.Odb.Core.Server.Message.GetObjectFromIdMessageResponse">
            <summary>A response to a GetMessage comamnd</summary>
            <author>olivier s</author>
        </member>
        <member name="F:NeoDatis.Odb.Core.Server.Message.GetObjectFromIdMessageResponse.nnoi">
            <summary>meta representation of the objects</summary>
        </member>
        <member name="T:NeoDatis.Odb.Core.Server.Message.GetObjectHeaderFromIdMessage">
            <summary>Message used to retrieve the object info header from an object oid</summary>
            <author>olivier</author>
        </member>
        <member name="T:NeoDatis.Odb.Core.Server.Message.GetObjectHeaderFromIdMessageResponse">
            <summary>A response to a GetObjectHeaderFromIdMessage comamnd</summary>
            <author>olivier s</author>
        </member>
        <member name="F:NeoDatis.Odb.Core.Server.Message.GetObjectHeaderFromIdMessageResponse.oih">
            <summary>header of meta representation of the object</summary>
        </member>
        <member name="T:NeoDatis.Odb.Core.Server.Message.GetObjectValuesMessage">
            <summary>A message to get object values</summary>
            <author>osmadja</author>
        </member>
        <member name="T:NeoDatis.Odb.Core.Server.Message.GetObjectValuesMessageResponse">
            <summary>A response to a GetObjectValuesMessage command</summary>
            <author>olivier s</author>
        </member>
        <member name="F:NeoDatis.Odb.Core.Server.Message.GetObjectValuesMessageResponse.values">
            <summary>List of values</summary>
        </member>
        <member name="M:NeoDatis.Odb.Core.Server.Message.GetObjectValuesMessageResponse.GetPlan">
            <returns></returns>
        </member>
        <member name="T:NeoDatis.Odb.Core.Server.Message.NewClassInfoListMessage">
            <summary>A NewClassInfosMessage is used by the Client/Server mode to add a new class infos (List) to the meta model on the server
            	</summary>
            <author>osmadja</author>
        </member>
        <member name="T:NeoDatis.Odb.Core.Server.Message.NewClassInfoListMessageResponse">
            <summary>
            A NewClassInfoMessageResponse is used by the Client/Server mode to answer a NewClassInfoMessage,
            it returns all the class infos of the new server model
            </summary>
            <author>olivier s</author>
        </member>
        <member name="T:NeoDatis.Odb.Core.Server.Message.StoreMessage">
            <summary>A StoreMessage is used by the Client/Server mode to store an object</summary>
            <author>olivier s</author>
        </member>
        <member name="T:NeoDatis.Odb.Core.Server.Message.StoreMessageResponse">
            <summary>A StoreMessageResponse is used by the Client/Server mode to answer a StoreMessage
            	</summary>
            <author>olivier s</author>
        </member>
        <member name="T:NeoDatis.Odb.Core.Server.Transaction.ISessionManager">
            <summary>The interface for Client server Session Manager</summary>
            <author>olivier</author>
        </member>
        <member name="T:NeoDatis.Odb.Core.Trigger.Trigger">
            <summary>A simple base class for all triggers.</summary>
            <remarks>A simple base class for all triggers.</remarks>
            <author>olivier</author>
        </member>
        <member name="M:NeoDatis.Odb.Core.Transaction.ICache.SavePositionOfObjectWithOid(NeoDatis.Odb.OID,System.Int64)">
            <summary>To resolve uncommitted updates where the oid change and is not committed yet
            	</summary>
        </member>
        <member name="M:NeoDatis.Odb.Core.Transaction.ICache.StartReadingObjectInfoWithOid(NeoDatis.Odb.OID,NeoDatis.Odb.Core.Layers.Layer2.Meta.NonNativeObjectInfo)">
            <summary>
            To resolve cyclic reference, keep track of objects being read The read
            count is used to store how many times the object has been recursively
            read
            </summary>
            <param name="oid">The Object OID</param>
            <param name="objectInfo">The object info (not fully set) that is being read</param>
        </member>
        <member name="T:NeoDatis.Odb.Core.Transaction.ICrossSessionCache">
            <summary>
            This interface define the control over objects alive across different
            sessions.
            </summary>
            <remarks>
            This interface define the control over objects alive across different
            sessions. It is a wrapper for all objects put into cross cache. It's primary
            purpose is to maintain references to the linked objects that has been used.
            Different strategies can be used on the implementations to support the idea
            of a cache based on weak reference.
            </remarks>
            <since>1.9</since>
        </member>
        <member name="M:NeoDatis.Odb.Core.Transaction.ICrossSessionCache.AddObject(System.Object,NeoDatis.Odb.OID)">
            <summary>
            Associates the specified
            <see cref="T:NeoDatis.Odb.OID">NeoDatis.Odb.OID</see>
            with the specified object(key) in
            this cache
            </summary>
            <param name="@object">The key. This parameter can not be <code> null </code></param>
        </member>
        <member name="M:NeoDatis.Odb.Core.Transaction.ICrossSessionCache.RemoveObject(System.Object)">
            <summary>Removes the mapping for this object from this cache if it is present.</summary>
            <remarks>Removes the mapping for this object from this cache if it is present.</remarks>
            <param name="@object">
            that contains the reference to
            <see cref="T:NeoDatis.Odb.OID">NeoDatis.Odb.OID</see>
            . This parameter can not be <code> null </code>
            </param>
        </member>
        <member name="M:NeoDatis.Odb.Core.Transaction.ICrossSessionCache.RemoveOid(NeoDatis.Odb.OID)">
            <summary>Mark the object with the oid as deleted.</summary>
            <remarks>Mark the object with the oid as deleted.</remarks>
            <param name="oid">
            that must be marked as deleted.
            <pre>
            When objects are deleted by oid, the cost is too high to search the object by the oid, so we just keep the deleted oid,
            and when looking for an object, check if the oid if is the deleted oids
            </pre>
            </param>
        </member>
        <member name="M:NeoDatis.Odb.Core.Transaction.ICrossSessionCache.ExistObject(System.Object)">
            <summary>Returns true if this cache maps one key to the specified object.</summary>
            <remarks>Returns true if this cache maps one key to the specified object.</remarks>
            <param name="@object"></param>
            <returns>boolean</returns>
        </member>
        <member name="M:NeoDatis.Odb.Core.Transaction.ICrossSessionCache.GetOid(System.Object)">
            <summary>
            Return the specific
            <see cref="T:NeoDatis.Odb.OID">NeoDatis.Odb.OID</see>
            </summary>
            <param name="@object">
            The key on the cache for a
            <see cref="T:NeoDatis.Odb.OID">NeoDatis.Odb.OID</see>
            . This parameter can not be <code> null </code>
            </param>
            <returns>
            
            <see cref="T:NeoDatis.Odb.OID">NeoDatis.Odb.OID</see>
            . Returns <code> null </code> in case no find key.
            </returns>
        </member>
        <member name="M:NeoDatis.Odb.Core.Transaction.ICrossSessionCache.IsEmpty">
            <summary>Returns true if this map contains no key-value mappings.</summary>
            <remarks>Returns true if this map contains no key-value mappings.</remarks>
            <returns>boolean</returns>
        </member>
        <member name="M:NeoDatis.Odb.Core.Transaction.ICrossSessionCache.Clear">
            <summary>Removes all mappings from this cache.</summary>
            <remarks>Removes all mappings from this cache.</remarks>
        </member>
        <member name="M:NeoDatis.Odb.Core.Transaction.ICrossSessionCache.ToString">
            <summary>Returns a String writing down the objects</summary>
            <returns>String</returns>
        </member>
        <member name="M:NeoDatis.Odb.Core.Transaction.ICrossSessionCache.Size">
            <summary>Returns the number of key-value mappings in this cache.</summary>
            <remarks>Returns the number of key-value mappings in this cache.</remarks>
            <returns>int The amount of objects on the cache</returns>
        </member>
        <member name="M:NeoDatis.Odb.Core.Transaction.ISession.AddObjectToCache(NeoDatis.Odb.OID,System.Object,NeoDatis.Odb.Core.Layers.Layer2.Meta.ObjectInfoHeader)">
            <summary>Add these information on a session cache.</summary>
            <remarks>Add these information on a session cache.</remarks>
        </member>
        <member name="T:NeoDatis.Odb.Core.Transaction.ITmpCache">
            <summary>An interface for temporary cache</summary>
        </member>
        <member name="M:NeoDatis.Odb.Core.Transaction.ITransaction.Clear">
            <summary>clear the transaction</summary>
        </member>
        <member name="M:NeoDatis.Odb.Core.Transaction.ITransaction.Commit">
            <summary>Execute the commit process of the transaction</summary>
            <exception cref="T:System.Exception">System.Exception</exception>
        </member>
        <member name="M:NeoDatis.Odb.Core.Transaction.ITransaction.IsArchiveLog">
            <returns>Returns the archiveLog.</returns>
        </member>
        <member name="M:NeoDatis.Odb.Core.Transaction.ITransaction.SetArchiveLog(System.Boolean)">
            <param name="archiveLog">The archiveLog to set.</param>
        </member>
        <member name="M:NeoDatis.Odb.Core.Transaction.ITransaction.ManageWriteAction(System.Int64,System.Byte[])">
            <summary>The public method to add a write action to the transaction.</summary>
            <remarks>
            The public method to add a write action to the transaction. If first checks if the new write action action can be appended to the current write action.
            It is done by checking the currentWritePositioninWA. If yes (position==currentPositioninWA, just append the WA. If not, adds the current one to the transaction and creates a new one (as current)
            </remarks>
            <param name="position"></param>
            <param name="bytes"></param>
        </member>
        <member name="M:NeoDatis.Odb.Core.Transaction.ITransaction.GetNumberOfWriteActions">
            <returns>Returns the numberOfWriteActions.</returns>
        </member>
        <member name="M:NeoDatis.Odb.Core.Transaction.ITransaction.SetWritePosition(System.Int64)">
            <summary>Set the write position (position in main database file).</summary>
            <remarks>
            Set the write position (position in main database file). This is used to know if the next write can be
            appended to the previous one (in the same current Write Action) or not.
            </remarks>
            <param name="position"></param>
        </member>
        <member name="M:NeoDatis.Odb.Core.Transaction.ITransaction.Reset">
            <summary>Reset the transaction</summary>
        </member>
        <member name="M:NeoDatis.Odb.Core.Trigger.ITriggerManager.Transform(System.Object)">
            <summary>used to transform object before real trigger call.</summary>
            <remarks>
            used to transform object before real trigger call. This is used for
            example, in server side trigger where the object is encapsulated in an
            ObjectRepresentation instance. It is only for internal use
            </remarks>
        </member>
        <member name="T:NeoDatis.Odb.CorruptedDatabaseException">
            <summary>An exception thrown by ODB when a corrupted block is found</summary>
            <author>olivier</author>
        </member>
        <member name="T:NeoDatis.Odb.ODBRuntimeException">
            <summary>Generic ODB Runtime exception : Used to report all problems.</summary>
            <remarks>Generic ODB Runtime exception : Used to report all problems.</remarks>
            <author>osmadja</author>
        </member>
        <member name="T:NeoDatis.Odb.OID">
            <summary>The interface to represent OID.</summary>
            <remarks>
            The interface to represent OID. OID is a unique identifier for NeoDatis ODB
            entities like objects and classes. The id is generated by NeoDatis
            </remarks>
            <author>osmadja</author>
        </member>
        <member name="M:NeoDatis.Odb.OID.OidToString">
            <summary>To retrieve a string representation of an OID</summary>
            <returns></returns>
        </member>
        <member name="T:NeoDatis.Odb.Impl.Core.Btree.LazyODBBTreeIteratorMultiple`1">
            <summary>
            A Lazy BTree Iterator : It iterate on the object OIDs and lazy load objects from them (OIDs)
            Used by the LazyBTreeCollection
            </summary>
            <author>osmadja</author>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Btree.LazyODBBTreeIteratorMultiple`1.#ctor(NeoDatis.Btree.IBTree,NeoDatis.Odb.Core.OrderByConstants,NeoDatis.Odb.Core.Layers.Layer3.IStorageEngine,System.Boolean)">
            <param name="tree"></param>
            <param name="orderByType"></param>
            <param name="storageEngine"></param>
            <param name="returnObjects"></param>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Btree.LazyODBBTreeIteratorMultiple`1.LoadObject(NeoDatis.Odb.OID)">
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="T:NeoDatis.Odb.Impl.Core.Btree.LazyODBBTreeIteratorSIngle`1">
            <summary>
            A Lazy BTree Iterator : It iterate on the object OIDs and lazy load objects from them (OIDs)
            Used by the LazyBTreeCollection
            </summary>
            <author>osmadja</author>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Btree.LazyODBBTreeIteratorSIngle`1.#ctor(NeoDatis.Btree.IBTree,NeoDatis.Odb.Core.OrderByConstants,NeoDatis.Odb.Core.Layers.Layer3.IStorageEngine,System.Boolean)">
            <param name="tree"></param>
            <param name="orderByType"></param>
            <param name="storageEngine"></param>
            <param name="returnObjects"></param>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Btree.LazyODBBTreeIteratorSIngle`1.LoadObject(NeoDatis.Odb.OID)">
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="T:NeoDatis.Odb.Impl.Core.Btree.LazyODBBTreePersister">
            <summary>Class that persists the BTree and its node into the NeoDatis ODB Database.
            	</summary>
            <remarks>Class that persists the BTree and its node into the NeoDatis ODB Database.
            	</remarks>
            <author>osmadja</author>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Btree.LazyODBBTreePersister.oids">
            <summary>All loaded nodes</summary>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Btree.LazyODBBTreePersister.modifiedObjectOids">
            <summary>
            All modified nodes : the map is used to avoid duplication The key is the
            oid, the value is the position is the list
            </summary>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Btree.LazyODBBTreePersister.modifiedObjectOidList">
            <summary>The list is used to keep the order.</summary>
            <remarks>
            The list is used to keep the order. Deleted object will be replaced by
            null value, to keep the positions
            </remarks>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Btree.LazyODBBTreePersister.engine">
            <summary>The odb interface</summary>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Btree.LazyODBBTreePersister.tree">
            <summary>The tree we are persisting</summary>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Btree.LazyODBBTreePersister.LoadNodeById(System.Object)">
            <summary>Loads a node from its id.</summary>
            <remarks>
            Loads a node from its id. Tries to get if from memory, if not present
            then loads it from odb storage
            </remarks>
            <param name="id">The id of the nod</param>
            <returns>The node with the specific id</returns>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Btree.LazyODBBTreePersister.SaveNode(NeoDatis.Btree.IBTreeNode)">
            <summary>
            saves the bree node Only puts the current node in an 'modified Node' map
            to be saved on commit
            </summary>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Btree.LazyODBBTreePersister.Close">
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Btree.LazyODBBTreePersister.GetNextNodeId">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="T:NeoDatis.Odb.Impl.Core.Btree.ODBBTreeMultiple">
            <summary>The NeoDatis ODB BTree.</summary>
            <remarks>The NeoDatis ODB BTree. It extends the DefaultBTree implementation to add the ODB OID generated by the ODB database.
            	</remarks>
            <author>osmadja</author>
        </member>
        <member name="T:NeoDatis.Odb.Impl.Core.Btree.ODBBTreeNodeMultiple">
            <summary>The NeoDatis ODB BTree Node implementation.</summary>
            <remarks>The NeoDatis ODB BTree Node implementation. It extends the DefaultBTreeNode generic implementation to be able to be stored in the ODB database.
            	</remarks>
            <author>osmadja</author>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Btree.ODBBTreeNodeMultiple.parent">
            <summary>lazy loaded</summary>
        </member>
        <member name="T:NeoDatis.Odb.Impl.Core.Btree.ODBBTreeNodeSingle">
            <summary>The NeoDatis ODB BTree Node implementation.</summary>
            <remarks>The NeoDatis ODB BTree Node implementation. It extends the DefaultBTreeNode generic implementation to be able to be stored in the ODB database.
            	</remarks>
            <author>osmadja</author>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Btree.ODBBTreeNodeSingle.parent">
            <summary>lazy loaded</summary>
        </member>
        <member name="T:NeoDatis.Odb.Impl.Core.Btree.ODBBTreeSingle">
            <summary>The NeoDatis ODB BTree.</summary>
            <remarks>The NeoDatis ODB BTree. It extends the DefaultBTree implementation to add the ODB OID generated by the ODB database.
            	</remarks>
            <author>osmadja</author>
        </member>
        <member name="T:NeoDatis.Odb.Impl.Core.Layers.Layer1.Introspector.AbstractClassIntrospector">
            <summary>The ClassIntrospector is used to introspect classes.</summary>
            <remarks>
            The ClassIntrospector is used to introspect classes. It uses Reflection to
            extract class information. It transforms a native Class into a ClassInfo (a
            meta representation of the class) that contains all informations about the
            class.
            </remarks>
            <author>osmadja</author>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer1.Introspector.AbstractClassIntrospector.Introspect(System.Type,System.Boolean)">
            <summary> </summary>
            <param name="clazz">The class to instrospect
            </param>
            <param name="recursive">If true, goes does the hierarchy to try to analyse all classes
            </param>
            <param name="The">list of class info detected while introspecting the class
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer1.Introspector.AbstractClassIntrospector.InternalIntrospect(System.Type,System.Boolean,NeoDatis.Odb.Core.Layers.Layer2.Meta.ClassInfoList)">
            <summary> </summary>
            <param name="clazz">The class to instrospect
            </param>
            <param name="recursive">If true, goes does the hierarchy to try to analyse all classes
            </param>
            <param name="A">map with classname that are being introspected, to avoid recursive calls
            
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer1.Introspector.AbstractClassIntrospector.GetClassInfo(System.String,NeoDatis.Odb.Core.Layers.Layer2.Meta.ClassInfo)">
            <summary>Builds a class info from a class and an existing class info
            
            <pre>
            The existing class info is used to make sure that fields with the same name will have
            the same id
            </pre>
            
            </summary>
            <param name="fullClassName">The name of the class to get info
            </param>
            <param name="existingClassInfo">
            </param>
            <returns> A ClassInfo -  a meta representation of the class
            </returns>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer1.Introspector.AbstractClassIntrospector.GetSuperClasses(System.String,System.Boolean)">
            <summary> </summary>
            <param name="fullClassName">
            </param>
            <param name="includingThis">
            </param>
            <returns> The list of super classes
            </returns>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer1.Introspector.AbstractClassIntrospector.Instrospect(NeoDatis.Tool.Wrappers.List.IOdbList{NeoDatis.Odb.Core.Layers.Layer2.Meta.ClassInfo})">
            <summary>
            introspect a list of classes
            This method return the current meta model based on the classes that currently exist in the
            execution classpath.
            </summary>
            <remarks>
            introspect a list of classes
            This method return the current meta model based on the classes that currently exist in the
            execution classpath. The result will be used to check meta model compatiblity between
            the meta model that is currently persisted in the database and the meta model
            currently executing in JVM. This is used b the automatic meta model refactoring
            </remarks>
            <returns></returns>
            <returns>A map where the key is the class name and the key is the ClassInfo: the class meta representation
            	</returns>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer1.Introspector.AbstractClassIntrospector.Init2">
            <summary>Two phase init method</summary>
        </member>
        <member name="T:NeoDatis.Odb.Impl.Core.Layers.Layer1.Introspector.AndroidClassIntrospector">
            <summary>The ClassIntrospector is used to introspect classes.</summary>
            <remarks>
            The ClassIntrospector is used to introspect classes. It uses Reflection to
            extract class information. It transforms a native Class into a ClassInfo (a
            meta representation of the class) that contains all informations about the
            class.
            </remarks>
            <author>osmadja</author>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer1.Introspector.AndroidClassIntrospector.TryToCreateAnEmptyConstructor(System.Type)">
            <summary>
            NeoDatis uses sun classes to create dynamic empty constructors so it does not work on Android
            TODO check how to do this on Android
            and stores it the constructor cache.
            </summary>
            <remarks>
            NeoDatis uses sun classes to create dynamic empty constructors so it does not work on Android
            TODO check how to do this on Android
            and stores it the constructor cache.
            </remarks>
            <param name="clazz"></param>
            <returns></returns>
        </member>
        <member name="T:NeoDatis.Odb.Impl.Core.Layers.Layer1.Introspector.DefaultClassIntrospector">
            <summary>The ClassIntrospector is used to introspect classes.</summary>
            <remarks>
            The ClassIntrospector is used to introspect classes. It uses Reflection to
            extract class information. It transforms a native Class into a ClassInfo (a
            meta representation of the class) that contains all informations about the
            class.
            </remarks>
            <author>osmadja</author>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer1.Introspector.DefaultClassIntrospector.TryToCreateAnEmptyConstructor(System.Type)">
            <summary>
            Tries to create a default constructor (with no parameter) for the class
            and stores it the constructor cache.
            </summary>
            <remarks>
            Tries to create a default constructor (with no parameter) for the class
            and stores it the constructor cache.
            </remarks>
            <param name="clazz"></param>
            <returns></returns>
        </member>
        <member name="T:NeoDatis.Odb.Impl.Core.Layers.Layer1.Introspector.DefaultInstrumentationCallback">
            <author>olivier</author>
        </member>
        <member name="T:NeoDatis.Odb.Impl.Core.Layers.Layer1.Introspector.DefaultInstrumentationCallbackForStore">
            <author>olivier</author>
        </member>
        <!-- Badly formed XML comment ignored for member "M:NeoDatis.Odb.Impl.Core.Layers.Layer1.Introspector.DefaultInstrumentationCallbackForStore.CheckIfObjectMustBeReconnected(System.Object)" -->
        <member name="T:NeoDatis.Odb.Impl.Core.Layers.Layer1.Introspector.GetDependentObjectIntrospectingCallback">
            <author>olivier</author>
        </member>
        <member name="T:NeoDatis.Odb.Impl.Core.Layers.Layer1.Introspector.LocalObjectIntrospector">
            <summary>The local implementation of the Object Instrospector.</summary>
            <remarks>The local implementation of the Object Instrospector.</remarks>
            <author>osmadja</author>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer1.Introspector.LocalObjectIntrospector.GetObjectInfo(System.Object,NeoDatis.Odb.Core.Layers.Layer2.Meta.ClassInfo,System.Boolean,System.Collections.Generic.IDictionary{System.Object,NeoDatis.Odb.Core.Layers.Layer2.Meta.NonNativeObjectInfo},NeoDatis.Odb.Core.Layers.Layer1.Introspector.IIntrospectionCallback)">
            <summary>retrieve object data</summary>
            <param name="o"></param>
            <param name="ci"></param>
            <param name="recursive"></param>
            <returns>The object info</returns>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer1.Introspector.LocalObjectIntrospector.GetObjectInfoInternal(NeoDatis.Odb.Core.Layers.Layer2.Meta.AbstractObjectInfo,System.Object,NeoDatis.Odb.Core.Layers.Layer2.Meta.ClassInfo,System.Boolean,System.Collections.Generic.IDictionary{System.Object,NeoDatis.Odb.Core.Layers.Layer2.Meta.NonNativeObjectInfo},NeoDatis.Odb.Core.Layers.Layer1.Introspector.IIntrospectionCallback)">
            <summary>
            Build a meta representation of an object
            <pre>
            warning: When an object has two fields with the same name (a private field with the same name in a parent class, the deeper field (of the parent) is ignored!)
            </pre>
            </summary>
            <param name="o"></param>
            <param name="ci"></param>
            <param name="recursive"></param>
            <returns>The ObjectInfo</returns>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer1.Introspector.LocalObjectIntrospector.ObjectHasChanged(System.Object)">
            <summary>Used when byte code instrumentation is to check if an object has changed
            	</summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="T:NeoDatis.Odb.Impl.Core.Layers.Layer2.Instance.InstanceBuilder">
            <summary>Class used to build instance from Meta Object representation.</summary>
            <remarks>
            Class used to build instance from Meta Object representation. Layer 2 to
            Layer 1 conversion.
            </remarks>
            <author>osmadja</author>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer2.Instance.InstanceBuilder.GetSession">
            <summary>Local and server InstanceBuilder must define their own getSession()</summary>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer2.Instance.InstanceBuilder.BuildEnumInstance(NeoDatis.Odb.Core.Layers.Layer2.Meta.EnumNativeObjectInfo,System.Type)">
            <summary>Builds an instance of an enum</summary>
            <param name="enumClass"></param>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer2.Instance.InstanceBuilder.BuildArrayInstance(NeoDatis.Odb.Core.Layers.Layer2.Meta.ArrayObjectInfo)">
            <summary>Builds an instance of an array</summary>
        </member>
        <member name="T:NeoDatis.Odb.Impl.Core.Layers.Layer2.Instance.ODBClassPool">
            <summary>A simple class pool, to optimize instance creation</summary>
            <author>osmadja</author>
        </member>
        <member name="T:NeoDatis.Odb.Impl.Core.Layers.Layer2.Meta.Compare.AttributeValueComparator">
            <author>olivier</author>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer2.Meta.Compare.AttributeValueComparator.Compare(System.IComparable,System.IComparable)">
            <summary>A geenric compare method</summary>
            <param name="c1"></param>
            <param name="c2"></param>
            <returns></returns>
        </member>
        <member name="T:NeoDatis.Odb.Impl.Core.Layers.Layer2.Meta.Compare.ObjectInfoComparator">
            <summary>Manage Object info differences.</summary>
            <remarks>
            Manage Object info differences. compares two object info and tells which
            objects in the object hierarchy has changed. This is used by the update to process to optimize it and actually update what has changed
            </remarks>
            <author>olivier s</author>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer2.Meta.Compare.ObjectInfoComparator.AddPendingVerification(NeoDatis.Odb.Core.Layers.Layer2.Meta.AbstractObjectInfo)">
            <summary>
            An object reference has changed and the new object has not been checked, so disabled in place update
            TODO this is not good =&gt; all reference update will be done by full update and not in place update
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer2.Meta.Compare.ObjectInfoComparator.ManageCollectionChanges(NeoDatis.Odb.Core.Layers.Layer2.Meta.NonNativeObjectInfo,NeoDatis.Odb.Core.Layers.Layer2.Meta.NonNativeObjectInfo,System.Int32,NeoDatis.Odb.Core.Layers.Layer2.Meta.CollectionObjectInfo,NeoDatis.Odb.Core.Layers.Layer2.Meta.CollectionObjectInfo,System.Int32)">
            <summary>
            Checks if something in the Collection has changed, if yes, stores the
            change
            </summary>
            <param name="nnoi1">
            The first Object meta representation (nnoi =
            NonNativeObjectInfo)
            </param>
            <param name="nnoi2">The second object meta representation</param>
            <param name="fieldIndex">The field index that this collection represents</param>
            <param name="coi1">
            The Meta representation of the collection 1 (coi =
            CollectionObjectInfo)
            </param>
            <param name="coi2">The Meta representation of the collection 2</param>
            <param name="objectRecursionLevel"></param>
            <returns>true if 2 collection representation are different</returns>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer2.Meta.Compare.ObjectInfoComparator.ManageArrayChanges(NeoDatis.Odb.Core.Layers.Layer2.Meta.NonNativeObjectInfo,NeoDatis.Odb.Core.Layers.Layer2.Meta.NonNativeObjectInfo,System.Int32,NeoDatis.Odb.Core.Layers.Layer2.Meta.ArrayObjectInfo,NeoDatis.Odb.Core.Layers.Layer2.Meta.ArrayObjectInfo,System.Int32)">
            <summary>Checks if something in the Arary has changed, if yes, stores the change</summary>
            <param name="nnoi1">
            The first Object meta representation (nnoi =
            NonNativeObjectInfo)
            </param>
            <param name="nnoi2">The second object meta representation</param>
            <param name="fieldIndex">The field index that this collection represents</param>
            <param name="aoi1">The Meta representation of the array 1 (aoi = ArraybjectInfo)</param>
            <param name="aoi2">The Meta representation of the array 2</param>
            <param name="objectRecursionLevel"></param>
            <returns>true if the 2 array representations are different</returns>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer2.Meta.Compare.ObjectInfoComparator.ManageMapChanges(NeoDatis.Odb.Core.Layers.Layer2.Meta.NonNativeObjectInfo,NeoDatis.Odb.Core.Layers.Layer2.Meta.NonNativeObjectInfo,System.Int32,NeoDatis.Odb.Core.Layers.Layer2.Meta.MapObjectInfo,NeoDatis.Odb.Core.Layers.Layer2.Meta.MapObjectInfo,System.Int32)">
            <summary>Checks if something in the Map has changed, if yes, stores the change</summary>
            <param name="nnoi1">
            The first Object meta representation (nnoi =
            NonNativeObjectInfo)
            </param>
            <param name="nnoi2">The second object meta representation</param>
            <param name="fieldIndex">The field index that this map represents</param>
            <param name="moi1">The Meta representation of the map 1 (moi = MapObjectInfo)</param>
            <param name="moi2">The Meta representation of the map 2</param>
            <param name="objectRecursionLevel"></param>
            <returns>true if the 2 map representations are different</returns>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer2.Meta.Serialization.ISerializer.FromString(System.String)">
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer2.Meta.Serialization.AtomicNativeObjectSerializer.FromString(System.String)">
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer2.Meta.Serialization.CollectionObjectInfoSerializer.FromString(System.String)">
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer2.Meta.Serialization.NativeObjectSerializer.FromString(System.String)">
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer2.Meta.Serialization.Serializer.FromString(System.String)">
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer2.Meta.Serialization.Serializer.FromOneString(System.String)">
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="T:NeoDatis.Odb.Impl.Core.Layers.Layer3.Block.BlockStatus">
            <summary>To keep track of block status</summary>
        </member>
        <member name="T:NeoDatis.Odb.Impl.Core.Layers.Layer3.Block.BlockTypes">
            <summary>All Block Types of the ODB database format.</summary>
            <remarks>All Block Types of the ODB database format.</remarks>
            <author>osmadja</author>
        </member>
        <member name="T:NeoDatis.Odb.Impl.Core.Layers.Layer3.Buffer.MultiBufferedFileIO">
            <summary>A buffer manager that can manage more than one buffer.</summary>
            <remarks>
            A buffer manager that can manage more than one buffer. Number of buffers can
            be configured using Configuration.setNbBuffers().
            </remarks>
            <author>osmadja</author>
        </member>
        <member name="T:NeoDatis.Odb.Impl.Core.Layers.Layer3.Buffer.MultiBufferedIO">
            <summary>
            Abstract class allowing buffering for IO
            This class is used to give a transparent access to buffered io : File, socket
            The DefaultFileIO and DefaultSocketIO inherits from AbstractIO
            </summary>
            <author>olivier s</author>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Layers.Layer3.Buffer.MultiBufferedIO.numberOfFlush">
            <summary>Internal counter of flush</summary>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Layers.Layer3.Buffer.MultiBufferedIO.ioDeviceLength">
            <summary>The length of the io device</summary>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Layers.Layer3.Buffer.MultiBufferedIO.bufferSize">
            <summary>The size of the buffer</summary>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Layers.Layer3.Buffer.MultiBufferedIO.isUsingBuffer">
            <summary>A boolean value to check if read write are using buffer</summary>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Buffer.MultiBufferedIO.GetOverlappingBuffers(System.Int64,System.Int32)">
            <summary>
            Check if a new buffer starting at position with a size ='size' would
            overlap with an existing buffer
            </summary>
            <param name="position"></param>
            <param name="size"></param>
            <returns>@</returns>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Buffer.MultiBufferedIO.GetNumberOfFlush">
            <returns>Returns the numberOfFlush.</returns>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Buffer.MultiBufferedFileIO.BuildFileWriter(System.Boolean)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="T:NeoDatis.Odb.Impl.Core.Layers.Layer3.Crypto.AesMd5Cypher">
            <summary>A simple cypher based on AES/MD5.</summary>
            <remarks>A simple cypher based on AES/MD5. Code from Grant Slender</remarks>
            <author>osmadja</author>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Crypto.AesMd5Cypher.Init(System.String,System.Boolean,System.String)">
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Crypto.AesMd5Cypher.Close">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Crypto.AesMd5Cypher.Read">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Crypto.AesMd5Cypher.Read(System.Byte[],System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Crypto.AesMd5Cypher.Seek(System.Int64)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Crypto.AesMd5Cypher.Write(System.Byte)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Crypto.AesMd5Cypher.Write(System.Byte[],System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Crypto.AesMd5Cypher.Length">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Crypto.AesMd5Cypher.LockFile">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="T:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.AbstractObjectWriter">
            <summary>Manage all IO writing</summary>
            <author>olivier s</author>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.AbstractObjectWriter.triggerManager">
            <summary>To manage triggers</summary>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.AbstractObjectWriter.Init2">
            <summary>
            The init2 method is the two phase init implementation The
            FileSystemInterface depends on the session creation which is done by
            subclasses after the ObjectWriter constructor So we can not execute the
            buildFSI in the constructor as it would result in a non initialized
            object reference (the session)
            </summary>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.AbstractObjectWriter.CreateEmptyDatabaseHeader(System.Int64,System.String,System.String)">
            <summary>Creates the header of the file</summary>
            <param name="creationDate">The creation date</param>
            <param name="user">The user</param>
            <param name="password">The password @</param>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.AbstractObjectWriter.WriteEncrytionFlag(System.Boolean,System.Boolean)">
            <summary>Write the encryption flag : 0= no encryption, 1=with encryption</summary>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.AbstractObjectWriter.WriteVersion(System.Boolean)">
            <summary>Write the version in the database file</summary>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.AbstractObjectWriter.WriteReplicationFlag(System.Boolean,System.Boolean)">
            <summary>Write the replication flag : 0= No replication, 1= Use replication</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.AbstractObjectWriter.WriteLastTransactionId(NeoDatis.Odb.TransactionId)" -->
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.AbstractObjectWriter.WriteNumberOfClasses(System.Int64,System.Boolean)">
            <summary>Write the number of classes in meta-model</summary>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.AbstractObjectWriter.WriteLastODBCloseStatus(System.Boolean,System.Boolean)">
            <summary>Write the status of the last odb close</summary>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.AbstractObjectWriter.WriteDatabaseCharacterEncoding(System.Boolean)">
            <summary>Write the database characterEncoding</summary>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.AbstractObjectWriter.WriteIdBlock(System.Int64,System.Int32,System.Byte,System.Int32,System.Int64,System.Boolean)">
            <summary>
            Writes the header of a block of type ID - a block that contains ids of
            objects and classes
            </summary>
            <param name="position">
            Position at which the block must be written, if -1, take the
            next available position
            </param>
            <param name="idBlockSize">The block size in byte</param>
            <param name="blockStatus">The block status</param>
            <param name="blockNumber">The number of the block</param>
            <param name="previousBlockPosition">The position of the previous block of the same type
            	</param>
            <param name="writeInTransaction">To indicate if write must be done in transaction
            	</param>
            <returns>The position of the id @</returns>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.AbstractObjectWriter.MarkIdBlockAsFull(System.Int64,System.Int64,System.Boolean)">
            <summary>
            Marks a block of type id as full, changes the status and the next block
            position
            </summary>
            <param name="blockPosition"></param>
            <param name="nextBlockPosition"></param>
            <param name="writeInTransaction"></param>
            <returns>The block position @</returns>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.AbstractObjectWriter.AssociateIdToObject(System.Byte,System.Byte,System.Int64,NeoDatis.Odb.OID,System.Int64,System.Boolean)">
            <summary>Associate an object OID to its position</summary>
            <param name="idType">The type : can be object or class</param>
            <param name="idStatus">The status of the OID</param>
            <param name="currentBlockIdPosition">The current OID block position</param>
            <param name="oid">The OID</param>
            <param name="objectPosition">The position</param>
            <param name="writeInTransaction">To indicate if write must be executed in transaction
            	</param>
            <returns>@</returns>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.AbstractObjectWriter.UpdateObjectPositionForObjectOIDWithPosition(System.Int64,System.Int64,System.Boolean)">
            <summary>Updates the real object position of the object OID</summary>
            <param name="idPosition">The OID position</param>
            <param name="objectPosition">The real object position</param>
            <param name="writeInTransactionTo">indicate if write must be done in transaction @
            	</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.AbstractObjectWriter.UpdateClassPositionForClassOIDWithPosition(System.Int64,System.Int64,System.Boolean)" -->
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.AbstractObjectWriter.PersistClass(NeoDatis.Odb.Core.Layers.Layer2.Meta.ClassInfo,System.Int32,System.Boolean,System.Boolean)">
            <summary>Persist a single class info - This method is used by the XML Importer.</summary>
            <remarks>Persist a single class info - This method is used by the XML Importer.</remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.AbstractObjectWriter.WriteClassInfoBody(NeoDatis.Odb.Core.Layers.Layer2.Meta.ClassInfo,System.Int64,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.AbstractObjectWriter.WriteFirstClassInfoOID(NeoDatis.Odb.OID,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.AbstractObjectWriter.WriteClassAttributeInfo(NeoDatis.Odb.Core.Layers.Layer2.Meta.ClassAttributeInfo,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.AbstractObjectWriter.WriteNativeObjectInfo(NeoDatis.Odb.Core.Layers.Layer2.Meta.NativeObjectInfo,System.Int64,System.Boolean,System.Boolean)" -->
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.AbstractObjectWriter.ManageNewObjectPointers(NeoDatis.Odb.Core.Layers.Layer2.Meta.NonNativeObjectInfo,NeoDatis.Odb.Core.Layers.Layer2.Meta.ClassInfo,System.Int64,NeoDatis.Odb.Core.Layers.Layer2.Meta.MetaModel)">
            <summary>Updates pointers of objects, Only changes uncommitted info pointers</summary>
            <param name="objectInfo">The meta representation of the object being inserted</param>
            <param name="classInfo">The class of the object being inserted</param>
            <param name="position">The position where the object is being inserted @</param>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.AbstractObjectWriter.ManageIndexesForInsert(NeoDatis.Odb.OID,NeoDatis.Odb.Core.Layers.Layer2.Meta.NonNativeObjectInfo)">
            <summary>Insert the object in the index</summary>
            <param name="oid">The object id</param>
            <param name="nnoi">The object meta represenation</param>
            <returns>The number of indexes</returns>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.AbstractObjectWriter.ManageIndexesForDelete(NeoDatis.Odb.OID,NeoDatis.Odb.Core.Layers.Layer2.Meta.NonNativeObjectInfo)">
            <summary>Insert the object in the index</summary>
            <param name="oid">The object id</param>
            <param name="nnoi">The object meta represenation</param>
            <returns>The number of indexes</returns>
            <exception cref="T:System.Exception">System.Exception</exception>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.AbstractObjectWriter.InsertNonNativeObject(NeoDatis.Odb.OID,NeoDatis.Odb.Core.Layers.Layer2.Meta.NonNativeObjectInfo,System.Boolean)">
            <param name="oid">The Oid of the object to be inserted</param>
            <param name="nnoi">
            The object meta representation The object to be inserted in
            the database
            </param>
            <param name="isNewObject">To indicate if object is new</param>
            <returns>The position of the inserted object</returns>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.AbstractObjectWriter.InsertNativeObject(NeoDatis.Odb.Core.Layers.Layer2.Meta.NativeObjectInfo)">
            <param name="noi">
            The native object meta representation The object to be
            inserted in the database
            </param>
            <returns>The position of the inserted object</returns>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.AbstractObjectWriter.StoreObject(NeoDatis.Odb.OID,NeoDatis.Odb.Core.Layers.Layer2.Meta.NonNativeObjectInfo)">
            <summary>
            Store a meta representation of an object(already as meta
            representation)in ODBFactory database.
            </summary>
            <remarks>
            Store a meta representation of an object(already as meta
            representation)in ODBFactory database.
            To detect if object must be updated or insert, we use the cache. To
            update an object, it must be first selected from the database. When an
            object is to be stored, if it exist in the cache, then it will be
            updated, else it will be inserted as a new object. If the object is null,
            the cache will be used to check if the meta representation is in the
            cache
            </remarks>
            <param name="oid">The oid of the object to be inserted/updates</param>
            <param name="nnoi">The meta representation of an object</param>
            <returns>The object position</returns>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.AbstractObjectWriter.InternalStoreObject(NeoDatis.Odb.Core.Layers.Layer2.Meta.NativeObjectInfo)">
            <summary>
            Store a meta representation of a native object(already as meta
            representation)in ODBFactory database.
            </summary>
            <remarks>
            Store a meta representation of a native object(already as meta
            representation)in ODBFactory database. A Native object is an object that
            use native language type, String for example
            To detect if object must be updated or insert, we use the cache. To
            update an object, it must be first selected from the database. When an
            object is to be stored, if it exist in the cache, then it will be
            updated, else it will be inserted as a new object. If the object is null,
            the cache will be used to check if the meta representation is in the
            cache
            </remarks>
            <param name="nnoi">The meta representation of an object</param>
            <returns>The object position @</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.AbstractObjectWriter.UpdateNonNativeObjectInfo(NeoDatis.Odb.Core.Layers.Layer2.Meta.NonNativeObjectInfo,System.Boolean)" -->
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.AbstractObjectWriter.UpdateUpdateTimeAndObjectVersionNumber(NeoDatis.Odb.Core.Layers.Layer2.Meta.ObjectInfoHeader,System.Boolean)">
            <summary>Upate the version number of the object</summary>
            <param name="header"></param>
            <param name="writeInTransaction"></param>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.AbstractObjectWriter.ManageInPlaceUpdate(NeoDatis.Odb.Core.Layers.Layer2.Meta.Compare.IObjectInfoComparator,System.Object,NeoDatis.Odb.OID,NeoDatis.Odb.Core.Layers.Layer2.Meta.ObjectInfoHeader,NeoDatis.Odb.Core.Transaction.ICache,System.Boolean)">
            <summary>Manage in place update.</summary>
            <remarks>
            Manage in place update. Just write the value at the exact position if
            possible.
            </remarks>
            <param name="objectComparator">
            Contains all infos about differences between all version
            objects and new version
            </param>
            <param name="@object">The object being modified (new version)</param>
            <param name="oid">The oid of the object being modified</param>
            <param name="header">
            The header of the object meta representation (Comes from the
            cache)
            </param>
            <param name="cache">The cache it self</param>
            <param name="objectInInConnectedZone">
            A boolean value to indicate if object is in connected zone. I
            true, change must be made in transaction. If false, changes
            can be made in the database file directly.
            </param>
            <returns>The number of in place update successfully executed</returns>
            <exception cref="T:System.Exception">System.Exception</exception>
        </member>
        <!-- Badly formed XML comment ignored for member "M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.AbstractObjectWriter.WriteCollection(NeoDatis.Odb.Core.Layers.Layer2.Meta.CollectionObjectInfo,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.AbstractObjectWriter.WriteArray(NeoDatis.Odb.Core.Layers.Layer2.Meta.ArrayObjectInfo,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.AbstractObjectWriter.WriteMap(NeoDatis.Odb.Core.Layers.Layer2.Meta.MapObjectInfo,System.Boolean)" -->
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.AbstractObjectWriter.InternalStoreObjectWrapper(NeoDatis.Odb.Core.Layers.Layer2.Meta.AbstractObjectInfo)">
            <summary>
            This method is used to store the object : natibe or non native and return
            a number : - The position of the object if it is a native object - The
            oid (as a negative number) if it is a non native object
            </summary>
            <param name="aoi"></param>
            <returns></returns>
            <exception cref="T:System.Exception">System.Exception</exception>
        </member>
        <!-- Badly formed XML comment ignored for member "M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.AbstractObjectWriter.WriteNativeObjectHeader(System.Int32,System.Boolean,System.Byte,System.Boolean)" -->
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.AbstractObjectWriter.SafeOverWriteAtomicNativeObject(System.Int64,NeoDatis.Odb.Core.Layers.Layer2.Meta.AtomicNativeObjectInfo,System.Boolean)">
            <exception cref="!:Java.Lang.NumberFormatException"></exception>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <!-- Badly formed XML comment ignored for member "M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.AbstractObjectWriter.WriteAtomicNativeObject(NeoDatis.Odb.Core.Layers.Layer2.Meta.AtomicNativeObjectInfo,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.AbstractObjectWriter.UpdatePreviousObjectFieldOfObjectInfo(NeoDatis.Odb.OID,NeoDatis.Odb.OID,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.AbstractObjectWriter.UpdateNextObjectFieldOfObjectInfo(NeoDatis.Odb.OID,NeoDatis.Odb.OID,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.AbstractObjectWriter.MarkAsDeleted(System.Int64,NeoDatis.Odb.OID,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.AbstractObjectWriter.MarkAsAPointerTo(NeoDatis.Odb.OID,System.Int64,System.Int64)" -->
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.AbstractObjectWriter.UpdateInstanceFieldsOfClassInfo(NeoDatis.Odb.Core.Layers.Layer2.Meta.ClassInfo,System.Boolean)">
            <summary>
            Updates the instance related field of the class info into the database
            file Updates the number of objects, the first object oid and the next
            class oid
            </summary>
            <param name="classInfo">The class info to be updated</param>
            <param name="writeInTransaction">To specify if it must be part of a transaction @
            	</param>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.AbstractObjectWriter.UpdateLastInstanceFieldOfClassInfoWithId(NeoDatis.Odb.OID,System.Int64)">
            <summary>Updates the last instance field of the class info into the database file
            	</summary>
            <param name="classInfoPosition">The class info to be updated</param>
            <param name="lastInstancePosition">The last instance position @</param>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.AbstractObjectWriter.UpdateFirstInstanceFieldOfClassInfoWithId(NeoDatis.Odb.OID,System.Int64)">
            <summary>Updates the first instance field of the class info into the database file
            	</summary>
            <param name="classInfoPosition">The class info to be updated</param>
            <param name="firstInstancePosition">The first instance position @</param>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.AbstractObjectWriter.UpdateNbObjectsFieldOfClassInfo(NeoDatis.Odb.OID,System.Int64)">
            <summary>Updates the number of objects of the class info into the database file</summary>
            <param name="classInfoPosition">The class info to be updated</param>
            <param name="nbObjects">The number of object @</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.AbstractObjectWriter.UpdateObjectReference(System.Int64,NeoDatis.Odb.OID,System.Boolean)" -->
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.AbstractObjectWriter.UpdateArrayElement(System.Int64,System.Int32,NeoDatis.Odb.Core.Layers.Layer2.Meta.NativeObjectInfo,System.Boolean)">
            <summary>
            In place update for array element, only do in place update for atomic
            native fixed size elements
            </summary>
            <param name="arrayPosition"></param>
            <param name="arrayElementIndexToChange"></param>
            <param name="newValue"></param>
            <returns>true if in place update has been done,false if not</returns>
            <exception cref="T:System.Exception">System.Exception</exception>
        </member>
        <member name="T:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.DefaultByteArrayConverter">
            <summary>Converts array of bytes into native objects and native objects into array of bytes
            	</summary>
            <author>osmadja</author>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.DefaultByteArrayConverter.encoding">
            <summary>The encoding used for string to byte conversion</summary>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.DefaultByteArrayConverter.Init2">
            <summary>Two Phase Init method</summary>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.DefaultByteArrayConverter.StringToByteArray(System.String,System.Boolean,System.Int32,System.Boolean)">
            <summary> </summary>
            <param name="s">
            </param>
            <param name="withSize">if true, returns an array with an initial int with its size
            </param>
            <param name="totalSpace">The total space of the string (can be bigger that the real string size - to support later in place update)
            </param>
            <returns> The byte array that represent the string
            </returns>
            <throws>  UnsupportedEncodingException </throws>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.DefaultByteArrayConverter.ByteArrayToString(System.Byte[],System.Boolean,System.Boolean)">
            <summary> </summary>
            <param name="bytes">
            </param>
            <param name="hasSize">If hasSize is true, the first four bytes are the size of the string
            </param>
            <returns> The String represented by the byte array
            </returns>
            <throws>  UnsupportedEncodingException </throws>
        </member>
        <member name="T:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.Dummy">
            <summary>Undocumented class</summary>
            <author>osmadja</author>
        </member>
        <member name="T:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.FileMutex">
            <summary>A mutex to logically lock ODB database file</summary>
            <author>osmadja</author>
        </member>
        <member name="T:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.ObjectReader">
            <summary>Manage all IO Reading</summary>
            <author>olivier smadja</author>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.ObjectReader.storageEngine">
            <summary>The storage engine</summary>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.ObjectReader.blockPositions">
            <summary>To hold block number.</summary>
            <remarks>
            To hold block number. ODB compute the block number from the oid (as one
            block has 1000 oids), then it has to search the position of the block
            number! This cache is used to keep track of the positions of the block
            positions The key is the block number(Long) and the value the position
            (Long)
            </remarks>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.ObjectReader.fsi">
            <summary>The fsi is the object that knows how to write and read native types</summary>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.ObjectReader.currentDepth">
            <summary>A local variable to monitor object recursion</summary>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.ObjectReader.instanceBuilder">
            <summary>to build instances</summary>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.ObjectReader.classPool">
            <summary>to boost class fetch</summary>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.ObjectReader.DepthToSpaces">
            <summary>A small method for indentation</summary>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.ObjectReader.#ctor(NeoDatis.Odb.Core.Layers.Layer3.IStorageEngine)">
            <summary>The constructor</summary>
            <param name="engine"></param>
            <param name="triggerManager"></param>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.ObjectReader.ReadVersion">
            <summary>Read the version of the database file</summary>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.ObjectReader.ReadEncryptionFlag">
            <summary>Read the encryption flag of the database file</summary>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.ObjectReader.ReadReplicationFlag">
            <summary>Read the replication flag of the database file</summary>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.ObjectReader.ReadLastTransactionId(NeoDatis.Odb.DatabaseId)">
            <summary>Read the last transaction id</summary>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.ObjectReader.ReadNumberOfClasses">
            <summary>Reads the number of classes in database file</summary>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.ObjectReader.ReadFirstClassOid">
            <summary>Reads the first class OID</summary>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.ObjectReader.ReadLastODBCloseStatus">
            <summary>Reads the status of the last odb close</summary>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.ObjectReader.ReadDatabaseCharacterEncoding">
            <summary>Reads the database character encoding</summary>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.ObjectReader.ReadDatabaseHeader(System.String,System.String)">
            <summary>see http://wiki.neodatis.org/odb-file-format</summary>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.ObjectReader.ReadClassInfoHeader(NeoDatis.Odb.OID)">
            <summary>Read the class info header with the specific oid</summary>
            <param name="startPosition"></param>
            <returns>The read class info object @</returns>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.ObjectReader.ReadClassInfoBody(NeoDatis.Odb.Core.Layers.Layer2.Meta.ClassInfo)">
            <summary>Reads the body of a class info</summary>
            <param name="classInfo">The class info to be read with already read header</param>
            <returns>The read class info @</returns>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.ObjectReader.ReadClassAttributeInfo">
            <summary>Read an attribute of a class at the current position</summary>
            <returns>The ClassAttributeInfo description of the class attribute @</returns>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.ObjectReader.ReadNonNativeObjectAtPosition(System.Int64,System.Boolean,System.Boolean)">
            <summary>Reads an object at the specific position</summary>
            <param name="position">The position to read</param>
            <param name="useCache">To indicate if cache must be used</param>
            <param name="To">indicate if an instance must be return of just the meta info</param>
            <returns>The object with position @</returns>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.ObjectReader.ReadObjectInfoHeaderFromOid(NeoDatis.Odb.OID,System.Boolean)">
            <summary>
            Reads the pointers(ids or positions) of an object that has the specific
            oid
            </summary>
            <param name="oid">The oid of the object we want to read the pointers</param>
            <returns>The ObjectInfoHeader @</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.ObjectReader.ReadObjectInfoFromPosition(NeoDatis.Odb.Core.Layers.Layer2.Meta.ClassInfo,System.Int64,System.Boolean,System.Boolean)" -->
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.ObjectReader.ReadNonNativeObjectInfoFromPosition(NeoDatis.Odb.Core.Layers.Layer2.Meta.ClassInfo,NeoDatis.Odb.OID,System.Int64,System.Boolean,System.Boolean)">
            <summary>Reads a non non native Object Info (Layer2) from its position</summary>
            <param name="classInfo"></param>
            <param name="oid">can be null</param>
            <param name="position"></param>
            <param name="useCache"></param>
            <param name="returnInstance"></param>
            <returns>The meta representation of the object @</returns>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.ObjectReader.ReadObjectInfoValuesFromPosition(NeoDatis.Odb.Core.Layers.Layer2.Meta.ClassInfo,NeoDatis.Odb.OID,System.Int64,System.Boolean,NeoDatis.Tool.Wrappers.List.IOdbList{System.String},NeoDatis.Tool.Wrappers.List.IOdbList{System.String},System.Int32,System.String[])">
            <param name="classInfo">The class info of the objects to be returned</param>
            <param name="oid">The Object id of the object to return data</param>
            <param name="position">The position of the object to read</param>
            <param name="useCache">To indicate if cache must be used</param>
            <param name="attributeNames">
            The list of the attribute name for which we need to return a
            value, an attributename can contain relation like profile.name
            </param>
            <param name="relationAttributeNames">
            The original names of attributes to read the values, an
            attributename can contain relation like profile.name
            </param>
            <param name="recursionLevel">The recursion level of this call</param>
            <param name="orderByFields">?</param>
            <returns>
            A Map where keys are attributes names and values are the values
            of there attributes @
            </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.ObjectReader.ReadNativeAttributeHeader" -->
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.ObjectReader.ReadNativeObjectInfo(System.Int32,System.Int64,System.Boolean,System.Boolean,System.Boolean)">
            <summary>Reads a meta representation of a native object</summary>
            <param name="odbDeclaredTypeId">
            The type of attribute declared in the ClassInfo. May be
            different from actual attribute type in caso of OID and
            OdbObjectId
            </param>
            <param name="position"></param>
            <param name="useCache"></param>
            <param name="returnObject"></param>
            <param name="readHeader"></param>
            <returns>The native object representation @</returns>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.ObjectReader.ReadAtomicNativeObjectInfo(System.Int64,System.Int32)">
            <summary>Reads an atomic object</summary>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.ObjectReader.ReadEnumObjectInfo(System.Int64,System.Int32)">
            <summary>Reads an enum object</summary>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.ObjectReader.ReadCollection(System.Int64,System.Boolean,System.Boolean)">
            <summary>
            Reads a collection from the database file
            <p/>
            <pre>
            This method do not returns the object but a collection of representation of the objects using AsbtractObjectInfo
            &lt;p/&gt;
            The conversion to a real Map object will be done by the buildInstance method
            </pre>
            </summary>
            <param name="position">The position to be read</param>
            <returns>The meta representation of a collection @</returns>
            <exception cref="T:System.MemberAccessException">System.MemberAccessException</exception>
            <exception cref="!:Java.Lang.InstantiationException">Java.Lang.InstantiationException
            	</exception>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.ObjectReader.ReadArray(System.Int64,System.Boolean,System.Boolean)">
            <summary>Reads an array from the database file</summary>
            <param name="position">The position to be read</param>
            <returns>The Collection or the array @</returns>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.ObjectReader.ReadMap(System.Int64,System.Boolean,System.Boolean)">
            <summary>
            Reads a map from the database file
            <p/>
            <pre>
            WARNING : this method returns a collection representation of the map
            &lt;p/&gt;
            Firts it does not return the objects but its meta information using AbstractObjectInfo
            &lt;p/&gt;
            So for example, the map [1=olivier,2=chico]
            will be returns as a collection : [1,olivier,2,chico]
            and each element of the collection is an abstractObjectInfo (NativeObjectInfo or NonNativeObjectInfo)
            &lt;p/&gt;
            The conversion to a real Map object will be done by the buildInstance method
            </pre>
            </summary>
            <param name="position">The position to be read</param>
            <param name="useCache"></param>
            <param name="returnObjects"></param>
            <returns>The Map @</returns>
            <exception cref="T:System.MemberAccessException">System.MemberAccessException</exception>
            <exception cref="!:Java.Lang.InstantiationException">Java.Lang.InstantiationException
            	</exception>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.ObjectReader.GetNextObjectOID(NeoDatis.Odb.OID)">
            <summary>Gets the next object oid of the object with the specific oid</summary>
            <param name="position"></param>
            <returns>
            The position of the next object. If there is no next object,
            return -1 @
            </returns>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.ObjectReader.GetObjectTypeFromPosition(System.Int64)">
            <summary>Returns the name of the class of an object from its position</summary>
            <param name="objectPosition"></param>
            <returns>The object class name @</returns>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.ObjectReader.GetObjectPositionFromItsOid(NeoDatis.Odb.OID,System.Boolean,System.Boolean)">
            <summary>Gets the real object position from its OID</summary>
            <param name="oid">The oid of the object to get the position</param>
            <param name="throwException">
            To indicate if an exception must be thrown if object is not
            found
            </param>
            <returns>
            The object position, if object has been marked as deleted then
            return StorageEngineConstant.DELETED_OBJECT_POSITION @
            </returns>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.ObjectReader.GetIdBlockPositionFromNumber(System.Int64)">
            <param name="blockNumberToFind"></param>
            <returns>The block position @</returns>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.ObjectReader.GetAllIds(System.Byte)">
            <summary>Returns information about all OIDs of the database</summary>
            <param name="idType"></param>
            <returns>@</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.ObjectReader.GetObjectInfoHeaderList(NeoDatis.Odb.Core.Layers.Layer2.Meta.ClassInfo)" -->
        <member name="T:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.ObjectWriterNew">
            <summary>Manage all IO writing</summary>
            <author>olivier s</author>
        </member>
        <member name="T:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.StorageEngineAdapter">
            <summary>An Adapter for IStorageEngine interface.</summary>
            <remarks>An Adapter for IStorageEngine interface.</remarks>
            <author>osmadja</author>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.StorageEngineAdapter.currentTransactionId">
            <summary>To keep track of current transaction Id</summary>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.StorageEngineAdapter.triggerManager">
            <summary>To manage triggers</summary>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.StorageEngineAdapter.Count(System.Type)">
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.StorageEngineAdapter.DeleteObjectWithOid(System.Int64)">
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.StorageEngineAdapter.GetObjectFromId(NeoDatis.Odb.OID)">
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.StorageEngineAdapter.GetObjectInfos``1(System.String,NeoDatis.Odb.Core.Query.IQuery,System.Boolean,System.Int32,System.Int32,System.Boolean)">
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.StorageEngineAdapter.GetObjects``1(System.String,NeoDatis.Odb.Core.Query.IQuery,System.Boolean,System.Int32,System.Int32)">
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.StorageEngineAdapter.MainStoreObject(System.Object)">
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="T:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.StorageEngineConstant">
            <summary>Some Storage engine constants about offset position for object writing/reading.
            	</summary>
            <remarks>Some Storage engine constants about offset position for object writing/reading.
            	</remarks>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.StorageEngineConstant.FieldDoesNotExist">
            <summary>this occurs when a class has been refactored adding a field.</summary>
            <remarks>this occurs when a class has been refactored adding a field. Old objects do not the new field
            	</remarks>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.StorageEngineConstant.Version9">
            <summary>1.9 file format</summary>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.StorageEngineConstant.DatabaseHeaderUseEncryptionPosition">
            <summary>Use Encryption : 1 byte)</summary>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.StorageEngineConstant.BlockIdRepetitionIdType">
            <summary>pull id type (byte),id(long),</summary>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.StorageEngineConstant.NullObjectId">
            <summary>Used to make an attribute reference a null object - setting its id to zero
            	</summary>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.StorageEngineConstant.DatabaseHeaderVersionPosition">
            <summary>File format version : 1 int (4 bytes)</summary>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.StorageEngineConstant.DatabaseHeaderLanguageIdPosition">
            <summary>Future flag , may be to keep programming language that created the database: 1 byte
            	</summary>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.StorageEngineConstant.DatabaseHeaderDatabaseIdPosition">
            <summary>The Database ID : 4 Long (4*8 bytes)</summary>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.StorageEngineConstant.DatabaseHeaderUseReplicationPosition">
            <summary>To indicate if database uses replication : 1 byte)</summary>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.StorageEngineConstant.DatabaseHeaderLastTransactionId">
            <summary>The last Transaction ID 2 long (2*4*8 bytes)</summary>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.StorageEngineConstant.DatabaseHeaderNumberOfClassesPosition">
            <summary>The number of classes in the meta model 1 long (4*8 bytes)</summary>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.StorageEngineConstant.DatabaseHeaderFirstClassOid">
            <summary>The first class OID : 1 Long (8 bytes)</summary>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.StorageEngineConstant.DatabaseHeaderLastCloseStatusPosition">
            <summary>The last ODB close status.</summary>
            <remarks>The last ODB close status. Used to detect if the transaction is ok : 1 byte
            	</remarks>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.StorageEngineConstant.DatabaseHeaderDatabaseCharacterEncodingPosition">
            <summary>The Database character encoding : 50 bytes</summary>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.StorageEngineConstant.DatabaseHeaderDatabaseIsUserProtected">
            <summary>To indicate if database is password protected : 1 byte</summary>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.StorageEngineConstant.DatabaseHeaderDatabaseUserName">
            <summary>The database user name : 50 bytes</summary>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.StorageEngineConstant.DatabaseHeaderDatabasePassword">
            <summary>The database password : 50 bytes</summary>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.StorageEngineConstant.DatabaseHeaderCurrentIdBlockPosition">
            <summary>The position of the current id block: 1 long</summary>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.StorageEngineConstant.DatabaseHeaderFirstIdBlockPosition">
            <summary>First ID Block position</summary>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Layers.Layer3.Engine.StorageEngineConstant.BlockIdOffsetForBlockStatus">
            <summary>
            <pre>
            ID Block Header :
            Block size             : 1 int
            Block type             : 1 byte
            Block status           : 1 byte
            Prev block position    : 1 long
            Next block position    : 1 long
            Block number           : 1 int
            Max id                 : 1 long
            Total size = 34
            </pre>
            </summary>
        </member>
        <member name="T:NeoDatis.Odb.Impl.Core.Layers.Layer3.Oid.DefaultIdManager">
            <summary>Class to manage the ids of all the objects of the database.</summary>
            <remarks>Class to manage the ids of all the objects of the database.</remarks>
            <author>osmadja</author>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Layers.Layer3.Oid.DefaultIdManager.lastIds">
            <summary>Contains the last ids: id value,id position, id value, id position=&gt; the array is created with twice the size
            	</summary>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Oid.DefaultIdManager.#ctor(NeoDatis.Odb.Core.Layers.Layer3.IObjectWriter,NeoDatis.Odb.Core.Layers.Layer3.IObjectReader,System.Int64,System.Int32,NeoDatis.Odb.OID)">
            <param name="objectWriter">The object writer</param>
            <param name="objectReader">The object reader</param>
            <param name="currentBlockIdPosition">The position of the current block</param>
            <param name="currentBlockIdNumber">The number of the current block</param>
            <param name="currentMaxId">Maximum Database id</param>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Oid.DefaultIdManager.MustShift">
            <summary>To check if the id block must shift: that a new id block must be created
            	</summary>
            <returns>a boolean value to check if block of id is full</returns>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Oid.DefaultIdManager.GetNextId(System.Int64,System.Byte,System.Byte,System.String)">
            <summary>Gets an id for an object (instance)</summary>
            <param name="objectPosition">the object position (instance)</param>
            <param name="idType">The type id : object,class, unknown</param>
            <param name="label">A label for debug</param>
            <returns>The id</returns>
        </member>
        <member name="T:NeoDatis.Odb.Impl.Core.Layers.Layer3.Oid.FullIDInfo">
            <summary>Used to obtain internal infos about all database ids</summary>
            <author>osmadja</author>
        </member>
        <member name="T:NeoDatis.Odb.Impl.Core.Layers.Layer3.Oid.IDStatus">
            <summary>Status of  ID.</summary>
            <remarks>Status of  ID.</remarks>
            <author>osmadja</author>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Refactor.DefaultRefactorManager.RemoveField(System.String,System.String)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Refactor.DefaultRefactorManager.RenameClass(System.String,System.String)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Layers.Layer3.Refactor.DefaultRefactorManager.RenameField(System.String,System.String,System.String)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="T:NeoDatis.Odb.Impl.Core.Lookup.Lookups">
            <author>olivier</author>
        </member>
        <member name="T:NeoDatis.Odb.Impl.Core.Query.Criteria.CollectionQueryResultAction`1">
            <summary>Class that manage normal query.</summary>
            <remarks>
            Class that manage normal query. Query that return a list of objects. For each object
            That matches the query criteria, the objectMatch method is called and it keeps the objects in the 'objects' instance.
            </remarks>
            <author>olivier</author>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Query.Criteria.CollectionQueryResultAction`1.instanceBuilder">
            <summary>An object to build instances</summary>
        </member>
        <member name="T:NeoDatis.Odb.Impl.Core.Query.Criteria.CollectionSizeCriterion">
            <summary>A criterio to test collection or array size</summary>
            <author>olivier s</author>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Query.Criteria.ContainsCriterion.oid">
            <summary>
            For criteria query on objects, we use the oid of the object instead of
            the object itself.
            </summary>
            <remarks>
            For criteria query on objects, we use the oid of the object instead of
            the object itself. So comparison will be done with OID It is faster and
            avoid the need of the object (class) having to implement Serializable in
            client server mode
            </remarks>
        </member>
        <member name="T:NeoDatis.Odb.Impl.Core.Query.Criteria.CriteriaQueryExecutionPlan">
            <summary>
            A simple Criteria execution plan Check if the query can use index and tries
            to find the best index to be used
            </summary>
            <author>osmadja</author>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Query.Criteria.CriteriaQueryExecutionPlan.start">
            <summary>to keep track of the start date time of the plan</summary>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Query.Criteria.CriteriaQueryExecutionPlan.end">
            <summary>to keep track of the end date time of the plan</summary>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Query.Criteria.CriteriaQueryExecutionPlan.details">
            <summary>To keep the execution detail</summary>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Query.Criteria.CriteriaQueryExecutionPlan.GetAllInvolvedFieldIds(NeoDatis.Tool.Wrappers.List.IOdbList{System.String})">
            <summary>Transform a list of field names into a list of field ids</summary>
            <param name="fields"></param>
            <returns>The array of field ids</returns>
        </member>
        <member name="T:NeoDatis.Odb.Impl.Core.Query.Criteria.EqualCriterion">
            <summary>A criterion to match equality</summary>
            <author>olivier s</author>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Query.Criteria.EqualCriterion.oid">
            <summary>
            For criteria query on objects, we use the oid of the object instead of
            the object itself.
            </summary>
            <remarks>
            For criteria query on objects, we use the oid of the object instead of
            the object itself. So comparison will be done with OID It is faster and
            avoid the need of the object (class) having to implement Serializable in
            client server mode
            </remarks>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Query.Criteria.EqualCriterion.#ctor(System.String,System.Object)">
            <param name="attributeName"></param>
            <param name="value"></param>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Query.Criteria.EqualCriterion.#ctor(System.String,System.Object,System.Boolean)">
            <param name="attributeName"></param>
            <param name="value"></param>
            <param name="isCaseSensitive"></param>
        </member>
        <member name="T:NeoDatis.Odb.Impl.Core.Query.List.Objects.AbstractBTreeCollection`1">
            <summary>
            A collection that uses a BTree as an underlying system to provide ordered by Collections
            <p>
            </p>
            </summary>
        </member>
        <member name="T:NeoDatis.Odb.Objects`1">
            <summary>The main interface of all query results of NeoDatis ODB.</summary>
            <remarks>
            The main interface of all query results of NeoDatis ODB. Objects interface
            extends the Collection interface so it provides a standard collection
            behavior.
            </remarks>
            <author>osmadja</author>
        </member>
        <member name="M:NeoDatis.Odb.Objects`1.HasNext">
            <summary>Inform if the internal Iterator has more objects</summary>
            <returns></returns>
        </member>
        <member name="M:NeoDatis.Odb.Objects`1.Next">
            <summary>Returns the next object of the internal iterator of the collection</summary>
            <returns></returns>
        </member>
        <member name="M:NeoDatis.Odb.Objects`1.GetFirst">
            <summary>Return the first object of the collection, if exist</summary>
            <returns></returns>
        </member>
        <member name="M:NeoDatis.Odb.Objects`1.Reset">
            <summary>Reset the internal iterator of the collection</summary>
        </member>
        <member name="M:NeoDatis.Odb.Objects`1.AddWithKey(NeoDatis.Tool.Wrappers.OdbComparable,`0)">
            <summary>Add an object into the collection using a specific ordering key</summary>
            <param name="key"></param>
            <param name="@object">
            The object can be an OID, can o NNOI (NonNativeObjectInfo) or
            the object
            </param>
            <returns></returns>
        </member>
        <member name="M:NeoDatis.Odb.Objects`1.AddWithKey(System.Int32,`0)">
            <summary>Add an object into the collection using a specific ordering key</summary>
            <param name="key"></param>
            <param name="@object"></param>
            <returns></returns>
        </member>
        <member name="M:NeoDatis.Odb.Objects`1.Iterator(NeoDatis.Odb.Core.OrderByConstants)">
            <summary>
            Returns the collection iterator throughout the order by
            <see cref="T:NeoDatis.Odb.Core.OrderByConstants">NeoDatis.Odb.Core.OrderByConstants
            	</see>
            </summary>
            <param name="orderByType"></param>
            <returns></returns>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Query.List.Objects.AbstractBTreeCollection`1.AddWithKey(NeoDatis.Tool.Wrappers.OdbComparable,`0)">
            <summary>Adds the object in the btree with the specific key</summary>
            <param name="key"></param>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Query.List.Objects.AbstractBTreeCollection`1.AddWithKey(System.Int32,`0)">
            <summary>Adds the object in the btree with the specific key</summary>
            <param name="key"></param>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="T:NeoDatis.Odb.Impl.Core.Query.List.Objects.InMemoryBTreeCollection`1">
            <summary>An implementation of an ordered Collection based on a BTree implementation that holds all objects in memory
            	</summary>
            <author>osmadja</author>
        </member>
        <member name="T:NeoDatis.Odb.Impl.Core.Query.List.Objects.LazyBTreeCollection`1">
            <summary>A collection using a BTtree as a back-end component.</summary>
            <remarks>
            A collection using a BTtree as a back-end component. Lazy because it only keeps the oids of the objects. When asked for an object, loads
            it on demand and returns  it
            </remarks>
            <author>osmadja</author>
        </member>
        <member name="T:NeoDatis.Odb.Impl.Core.Query.List.Objects.LazySimpleListFromOid`1">
            <summary>A simple list to hold query result.</summary>
            <remarks>
            A simple list to hold query result. It is used when no index and no order by is
            used and inMemory = false
            This collection does not store the objects, it only holds the OIDs of the objects. When user ask an object
            the object is lazy loaded by the getObjectFromId method
            </remarks>
            <author>osmadja</author>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Query.List.Objects.LazySimpleListFromOid`1.currentPosition">
            <summary>a cursor when getting objects</summary>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Query.List.Objects.LazySimpleListFromOid`1.engine">
            <summary>The odb engine to lazily get objects</summary>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Query.List.Objects.LazySimpleListFromOid`1.returnInstance">
            <summary>indicate if objects must be returned as instance (true) or as non native objects (false)
            	</summary>
        </member>
        <member name="T:NeoDatis.Odb.Impl.Core.Query.List.Objects.LazySimpleListOfAOI`1">
            <summary>A simple list to hold query result.</summary>
            <remarks>
            A simple list to hold query result. It is used when no index and no order by
            This collection does not store the objects, it only holds the Abstract Object Info (AOI) of the objects. When user ask an object
            the object is lazy loaded by the buildInstance method
            </remarks>
            <author>osmadja</author>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Query.List.Objects.LazySimpleListOfAOI`1.currentPosition">
            <summary>a cursor when getting objects</summary>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Query.List.Objects.LazySimpleListOfAOI`1.instanceBuilder">
            <summary>The odb engine to lazily get objects</summary>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Query.List.Objects.LazySimpleListOfAOI`1.sessionId">
            <summary>this session id is used to store the odb session id.</summary>
            <remarks>
            this session id is used to store the odb session id. When in true client server mode, when the lazy list is sent
            back to the client, the instance builder (declared as transient) will be null on the client side.
            Then the client will use the Lookup class with the base id to obtain the client instance builder
            </remarks>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Query.List.Objects.LazySimpleListOfAOI`1.returnInstance">
            <summary>indicate if objects must be returned as instance (true) or as non native objects (false)
            	</summary>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Query.List.Objects.LazySimpleListOfAOI`1.#ctor(System.Int32,NeoDatis.Odb.Core.Layers.Layer2.Instance.IInstanceBuilder,System.Boolean)">
            <param name="size"></param>
            <param name="builder"></param>
            <param name="returnInstance"></param>
        </member>
        <member name="T:NeoDatis.Odb.Impl.Core.Query.List.Objects.SimpleList`1">
            <summary>A simple list to hold query result.</summary>
            <remarks>A simple list to hold query result. It is used when no index and no order by is used and inMemory = true
            	</remarks>
            <author>osmadja</author>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Query.List.Objects.SimpleList`1.Iterator(NeoDatis.Odb.Core.OrderByConstants)">
            <summary>The orderByType in not supported by this kind of list</summary>
        </member>
        <member name="T:NeoDatis.Odb.Impl.Core.Query.List.Values.DefaultObjectValues">
            <author>osmadja</author>
        </member>
        <member name="T:NeoDatis.Odb.ObjectValues">
            <summary>
            Interface that will be implemented to hold a row of a result of an Object
            Values Query
            </summary>
            <author>osmadja</author>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Query.List.Values.DefaultObjectValues.valuesByAlias">
            <summary>key=alias,value=value</summary>
        </member>
        <member name="T:NeoDatis.Odb.Impl.Core.Query.List.Values.InMemoryBTreeCollectionForValues">
            <summary>An ordered Collection to hold values (not objects) based on a BTree implementation.
            	</summary>
            <remarks>An ordered Collection to hold values (not objects) based on a BTree implementation. It holds all values in memory.
            	</remarks>
            <author>osmadja</author>
        </member>
        <member name="T:NeoDatis.Odb.Values">
            <summary>The main interface of all Object Values query results of NeoDatis ODB</summary>
            <author>osmadja</author>
        </member>
        <member name="M:NeoDatis.Odb.Values.HasNext">
            <summary>Inform if the internal Iterator has more objects</summary>
            <returns></returns>
        </member>
        <member name="M:NeoDatis.Odb.Values.GetFirst">
            <summary>Return the first object of the collection, if exist</summary>
            <returns></returns>
        </member>
        <member name="M:NeoDatis.Odb.Values.Reset">
            <summary>Reset the internal iterator of the collection</summary>
        </member>
        <member name="M:NeoDatis.Odb.Values.AddWithKey(NeoDatis.Tool.Wrappers.OdbComparable,NeoDatis.Odb.ObjectValues)">
            <summary>Add an object into the collection using a specific ordering key</summary>
            <param name="key"></param>
            <param name="@object"></param>
            <returns></returns>
        </member>
        <member name="M:NeoDatis.Odb.Values.AddWithKey(System.Int32,NeoDatis.Odb.ObjectValues)">
            <summary>Add an object into the collection using a specific ordering key</summary>
            <param name="key"></param>
            <param name="@object"></param>
            <returns></returns>
        </member>
        <member name="M:NeoDatis.Odb.Values.Iterator(NeoDatis.Odb.Core.OrderByConstants)">
            <summary>
            Returns the collection iterator throughout the order by
            <see cref="T:NeoDatis.Odb.Core.OrderByConstants">NeoDatis.Odb.Core.OrderByConstants
            	</see>
            </summary>
            <param name="orderByType"></param>
            <returns></returns>
        </member>
        <member name="T:NeoDatis.Odb.Impl.Core.Query.List.Values.SimpleListForValues">
            <summary>A simple list to hold query result for Object Values API.</summary>
            <remarks>A simple list to hold query result for Object Values API. It is used when no index and no order by is used and inMemory = true
            	</remarks>
            <author>osmadja</author>
        </member>
        <member name="T:NeoDatis.Odb.Impl.Core.Query.NQ.NativeQueryExecutionPlan">
            <summary>
            A simple Criteria execution plan
            Check if the query can use index and tries to find the best index to be used
            </summary>
            <author>osmadja</author>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Query.NQ.NativeQueryExecutionPlan.start">
            <summary>to keep track of the start date time of the plan</summary>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Query.NQ.NativeQueryExecutionPlan.end">
            <summary>to keep track of the end date time of the plan</summary>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Query.NQ.NativeQueryExecutor.MatchObjectWithOid(NeoDatis.Odb.OID,System.Boolean,System.Boolean)">
            <summary>
            Check if the object at position currentPosition matches the query, returns true
            This method must compute the next object position and the orderBy key if it exists!
            </summary>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Query.NQ.NativeQueryExecutor.GetCurrentInstance">
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="T:NeoDatis.Odb.Impl.Core.Query.Values.AverageValueAction">
            <summary>An action to compute the average value of a field</summary>
            <author>osmadja</author>
        </member>
        <member name="T:NeoDatis.Odb.Impl.Core.Query.Values.CountAction">
            <summary>An action to count objects of a  query</summary>
            <author>osmadja</author>
        </member>
        <member name="T:NeoDatis.Odb.Impl.Core.Query.Values.FieldValueAction">
            <summary>An action to retrieve an object field</summary>
            <author>osmadja</author>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Query.Values.FieldValueAction.value">
            <summary>The value of the attribute</summary>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Query.Values.GroupByValuesQueryResultAction.groupByResult">
            <summary>
            When executing a group by result, results are temporary stored in a hash map and at the end transfered to a Values objects
            In this case, the key of the map is the group by composed key, the value is a ValuesQueryResultAction
            </summary>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Query.Values.GroupByValuesQueryResultAction.instanceBuilder">
            <summary>An object to build instances</summary>
        </member>
        <member name="T:NeoDatis.Odb.Impl.Core.Query.Values.MaxValueAction">
            <summary>An action to compute the max value of a field</summary>
            <author>osmadja</author>
        </member>
        <member name="T:NeoDatis.Odb.Impl.Core.Query.Values.MinValueAction">
            <summary>An action to compute the max value of a field</summary>
            <author>osmadja</author>
        </member>
        <member name="T:NeoDatis.Odb.Impl.Core.Query.Values.SizeAction">
            <summary>An action to retrieve a size of a list.</summary>
            <remarks>
            An action to retrieve a size of a list. It is used by the Object Values API.
            When calling odb.getValues(new ValuesCriteriaQuery(Handler.class, Where
            .equal("id", id)).size("parameters");
            The sublist action will return  Returns a view of the portion of this list between the specified fromIndex, inclusive, and toIndex, exclusive.
            if parameters list contains [param1,param2,param3,param4], sublist("parameters",1,2) will return a sublist
            containing [param2,param3]
            </remarks>
            <author>osmadja</author>
        </member>
        <member name="T:NeoDatis.Odb.Impl.Core.Query.Values.SublistAction">
            <summary>An action to retrieve a sublist of list.</summary>
            <remarks>
            An action to retrieve a sublist of list. It is used by the Object Values API.
            When calling odb.getValues(new ValuesCriteriaQuery(Handler.class, Where
            .equal("id", id)).sublist("parameters",fromIndex, size);
            The sublist action will return  Returns a view of the portion of this list between the specified fromIndex, inclusive, and toIndex, exclusive.
            if parameters list contains [param1,param2,param3,param4], sublist("parameters",1,2) will return a sublist
            containing [param2,param3]
            </remarks>
            <author>osmadja</author>
        </member>
        <member name="T:NeoDatis.Odb.Impl.Core.Query.Values.ValuesCriteriaQuery">
            <summary>A values Criteria quwry is a query to retrieve object values instead of objects.
            	</summary>
            <remarks>
            A values Criteria quwry is a query to retrieve object values instead of objects. Values Criteria Query allows one to retrieve one field value of an object:
            - A field values
            - The sum of a specific numeric field
            - The Max value of a specific numeric field
            - The Min value of a specific numeric field
            - The Average value of a specific numeric value
            </remarks>
            <author>osmadja</author>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Query.Values.ValuesCriteriaQuery.returnInstance">
            <summary>To specify if the result must build instance of object meta representation
            	</summary>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Query.Values.ValuesCriteriaQuery.GetAllInvolvedFields">
            <summary>Returns the list of involved fields for this query.</summary>
            <remarks>
            Returns the list of involved fields for this query. List of String
            <pre>
            If query must return sum("value") and field("name"), involvedField will contain "value","name"
            </pre>
            </remarks>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Query.Values.ValuesQueryResultAction.queryFieldActions">
            <summary>A copy of the query object actions</summary>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Query.Values.ValuesQueryResultAction.instanceBuilder">
            <summary>An object to build instances</summary>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Server.Connection.DefaultServerConnection.oidsLockedForUpdate">
            <summary>To keep locked id for this session : key = oid, value=timestamp (Long)</summary>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Server.Connection.DefaultServerConnection.currentAction">
            <summary>Current action being executed</summary>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Server.Connection.DefaultServerConnection.Close">
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Server.Connection.DefaultServerConnection.Commit">
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Server.Connection.DefaultServerConnection.UnlockObjectWithOid(NeoDatis.Odb.OID)">
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Server.Connection.DefaultServerConnection.Rollback">
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Server.Connection.DefaultServerConnection.LockObjectWithOid(NeoDatis.Odb.OID)">
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="T:NeoDatis.Odb.Impl.Core.Server.Layers.Layer1.ClientObjectIntrospector">
            <summary>Not thread safe</summary>
            <author>osmadja</author>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Server.Layers.Layer1.ClientObjectIntrospector.clientOids">
            <summary>client oids are sequential ids created by the client side engine.</summary>
            <remarks>
            client oids are sequential ids created by the client side engine. When an object is sent to server, server ids are sent back from server
            and client engine replace all local(client) oids by the server oids.
            </remarks>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Server.Layers.Layer1.ClientObjectIntrospector.aois">
            <summary>A map of abstract object info, keys are local ids</summary>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Server.Layers.Layer1.ClientObjectIntrospector.connectionId">
            <summary>This represents the connection to the server</summary>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Server.Layers.Layer1.ClientObjectIntrospector.SynchronizeIds(NeoDatis.Odb.OID[],NeoDatis.Odb.OID[])">
            <summary>This method is used to make sure that client oids and server oids are equal.
            	</summary>
            <remarks>
            This method is used to make sure that client oids and server oids are equal.
            <pre>
            When storing an object, the client side does nt know the oid that each object will receive. So the client create
            temporary (sequencial) oids. These oids are sent to the server in the object meta-representations. On the server side,
            real OIDs are created and associated to the objects and to the client side ids. After calling the store on the server side
            The client use the the synchronizeIds method to replace client ids by the right server side ids.
            </pre>
            </remarks>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Server.Layers.Layer3.Engine.ClientStorageEngine.introspectionCallbackForInsert">
            <summary>
            This is a visitor used to execute some specific action(like calling
            'Before Insert Trigger') when introspecting an object
            </summary>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Server.Layers.Layer3.Engine.ClientStorageEngine.introspectionCallbackForUpdate">
            <summary>
            This is a visitor used to execute some specific action when introspecting
            an object
            </summary>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Server.Layers.Layer3.Engine.ClientStorageEngine.SendMessage(NeoDatis.Odb.Core.Server.Layers.Layer3.Engine.Message)">
            <summary>Opens socket send message and close.</summary>
            <remarks>Opens socket send message and close.</remarks>
            <TODO>This is bad,should keep the socket alive..</TODO>
            <param name="msg"></param>
            <returns>The response message</returns>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Server.Layers.Layer3.Engine.ClientStorageEngine.AddClasses(NeoDatis.Odb.Core.Layers.Layer2.Meta.ClassInfoList)">
            <summary>
            TODO Remove comment public ClassInfo addClass(ClassInfo newClassInfo,
            boolean addDependentClasses) { ClassInfoList ciList = new
            ClassInfoList(newClassInfo); ciList = addClasses(ciList); return
            session.getMetaModel
            ().getClassInfo(newClassInfo.getFullClassName(),true); }
            </summary>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Server.Layers.Layer3.Engine.ClientStorageEngine.DeleteObjectWithOid(NeoDatis.Odb.OID)">
            <summary>Delete an object from the database with the id</summary>
            <param name="oid">The object id to be deleted @</param>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Server.Layers.Layer3.Engine.ClientStorageEngine.InternalDeleteObjectWithOid(NeoDatis.Odb.OID)">
            <summary>Delete an object from the database with the id</summary>
            <param name="oid">The object id to be deleted @</param>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Server.Layers.Layer3.Engine.ClientStorageEngine.GetMetaObjectFromOid(NeoDatis.Odb.OID)">
            <summary>FIXME : not very efficient because it retrieves the full object</summary>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Server.Layers.Layer3.Engine.ClientStorageEngine.Run">
            <summary>or shutdown hook</summary>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Server.Layers.Layer3.Engine.ClientStorageEngine.Reconnect(System.Object,NeoDatis.Odb.OID)">
            <summary>Reconnect an object to the current session.</summary>
            <remarks>
            Reconnect an object to the current session. It connects the object and
            all the dependent objects (Objects accessible from the object graph of
            the root object
            <pre>
            This code is duplicated here because we don't have ObjectReader on client side,
            so all needed object reader methods are implement in the ClientStorageEngine class
            </pre>
            </remarks>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Server.Layers.Layer3.Engine.DefaultMessageStreamer.Serialize(System.IO.Stream,System.Object)">
            <summary>
            Writes an object to the specified Stream
            </summary>
            <param name="stream">The target Stream</param>
            <param name="objectToSend">The object to be sent</param>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Server.Layers.Layer3.Engine.DefaultMessageStreamer.Serialize(System.IO.BinaryWriter,System.Object)">
            <summary>
            Writes an object to the specified BinaryWriter
            </summary>
            <param name="stream">The target BinaryWriter</param>
            <param name="objectToSend">The object to be sent</param>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Server.Layers.Layer3.Engine.DefaultMessageStreamer.Deserialize(System.IO.BinaryReader)">
            <summary>
            Deserializes an object, or an entire graph of connected objects, and returns the object intance
            </summary>
            <param name="binaryReader">Reader instance used to read the object</param>
            <returns>The object instance</returns>
        </member>
        <member name="T:NeoDatis.Odb.Impl.Core.Server.Layers.Layer3.Engine.SameVmClientEngine">
            <summary>
            Client storage engine used when the client runs in the same Virtual machine
            than the client.
            </summary>
            <remarks>
            Client storage engine used when the client runs in the same Virtual machine
            than the client. In this case ODB will not execute remote call via IO but it
            will pass message (instead of sending them over the network. This can be very
            useful for Web Application where Server and client use to run on the same VM.
            </remarks>
            <author>osmadja</author>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Server.Layers.Layer3.Engine.ServerObjectWriter.GetSession">
            <summary>FIXME check using a class variable to keep the base identification</summary>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Server.Layers.Layer3.Engine.ServerStorageEngine.BuildFSI">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Server.Layers.Layer3.Engine.ServerStorageEngine.WriteObjectInfo(NeoDatis.Odb.OID,NeoDatis.Odb.Core.Layers.Layer2.Meta.NonNativeObjectInfo,System.Int64,System.Boolean)">
            <summary>Write an object meta-representation.</summary>
            <remarks>
            Write an object meta-representation. TODO Use a mutex to guarantee unique
            access to the file at this moment. This should be change
            </remarks>
            <param name="oid"></param>
            <param name="aoi"></param>
            <param name="position"></param>
            <param name="updatePointers"></param>
            <returns>The object position or id if negative</returns>
            <exception cref="T:System.Exception">System.Exception</exception>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Server.Layers.Layer3.Engine.ServerStorageEngine.DeleteObjectWithOid(NeoDatis.Odb.OID)">
            <summary>It is overiden to manage triggers</summary>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Server.Layers.Layer3.Engine.ServerStorageEngine.GetObjectInfos``1(NeoDatis.Odb.Core.Query.IQuery,System.Boolean,System.Int32,System.Int32,System.Boolean)">
            <summary>TODO Use a mutex to guarantee unique access to the file at this moment.</summary>
            <remarks>
            TODO Use a mutex to guarantee unique access to the file at this moment.
            This should be change
            </remarks>
            <param name="query"></param>
            <param name="inMemory"></param>
            <param name="startIndex"></param>
            <param name="endIndex"></param>
            <param name="returnOjects"></param>
            <returns>The object info list</returns>
            <exception cref="T:System.Exception">System.Exception</exception>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Server.Layers.Layer3.Engine.ServerStorageEngine.AddClass(NeoDatis.Odb.Core.Layers.Layer2.Meta.ClassInfo,System.Boolean)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="T:NeoDatis.Odb.Impl.Core.Transaction.LocalSession">
            <summary>The session object used when ODB is used in local/embedded mode</summary>
            <author>olivier s</author>
        </member>
        <member name="T:NeoDatis.Odb.Impl.Core.Transaction.Session">
            <summary>An ODB Session.</summary>
            <remarks>
            An ODB Session. Keeps track of all the session operations. Caches objects and
            manage the transaction.
            The meta model of the database is stored in the session.
            </remarks>
            <author>osmadja</author>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Transaction.Session.tmpCache">
            <summary>A temporary cache used for object info read</summary>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Server.Transaction.ServerSession.clientIds">
            <summary>client object ids</summary>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Server.Transaction.ServerSession.serverIds">
            <summary>server object ids.</summary>
            <remarks>
            server object ids. The server ids are sent to client as a result of a
            store operation to enable client to synchronize ids with server
            </remarks>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Server.Transaction.ServerSession.classInfoIds">
            <summary>To keep track of class info creation on server.</summary>
            <remarks>
            To keep track of class info creation on server. The ids of class info are
            then sent to client to update their ci ids
            </remarks>
        </member>
        <member name="T:NeoDatis.Odb.ObjectRepresentation">
            <summary>used to give the user an instance of an object representation, level2.</summary>
            <remarks>
            used to give the user an instance of an object representation, level2. The
            Object Representation encapsulates the NonNativeObjectInfo which is the
            internal object representation. This is used in the Server triggers.
            </remarks>
            <author>olivier</author>
        </member>
        <member name="M:NeoDatis.Odb.ObjectRepresentation.GetOid">
            <summary>Retrieves the oid of the object</summary>
            <returns></returns>
        </member>
        <member name="M:NeoDatis.Odb.ObjectRepresentation.GetObjectClassName">
            <summary>Retrieves the full object class name</summary>
            <returns></returns>
        </member>
        <member name="M:NeoDatis.Odb.ObjectRepresentation.GetValueOf(System.String)">
            <summary>Return the value of a specific attribute</summary>
            <param name="attributeName"></param>
            <returns></returns>
        </member>
        <member name="M:NeoDatis.Odb.ObjectRepresentation.SetValueOf(System.String,System.Object)">
            <summary>Sets the value of a specific attribute</summary>
            <param name="attributeName"></param>
            <param name="value"></param>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Trigger.DefaultTriggerManager.listOfUpdateTriggers">
            <summary>key is class Name, value is the collection of triggers for the class</summary>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Trigger.DefaultTriggerManager.listOfInsertTriggers">
            <summary>key is class Name, value is the collection of triggers for the class</summary>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Trigger.DefaultTriggerManager.listOfDeleteTriggers">
            <summary>key is class Name, value is the collection of triggers for the class</summary>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Trigger.DefaultTriggerManager.listOfSelectTriggers">
            <summary>key is class Name, value is the collection of triggers for the class</summary>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Trigger.DefaultTriggerManager.GetListOfDeleteTriggersFor(System.String)">
            <summary>FIXME try to cache l1+l2</summary>
            <param name="className"></param>
            <returns></returns>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Trigger.DefaultTriggerManager.Transform(System.Object)">
            <summary>For the default object trigger, no transformation is needed</summary>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Server.Trigger.DefaultServerTriggerManager.#ctor(NeoDatis.Odb.Core.Layers.Layer3.IStorageEngine)">
            <param name="engine"></param>
        </member>
        <member name="T:NeoDatis.Odb.Impl.Core.Transaction.Cache">
            <summary>A cache of object.</summary>
            <remarks>
            A cache of object.
            <pre>
            Cache objects by object, by position, by oids,...
            </pre>
            </remarks>
            <author>olivier s</author>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Transaction.Cache.objects">
            <summary>
            object cache - used to know if object exist in the cache TODO use
            hashcode instead?
            </summary>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Transaction.Cache.oids">
            <summary>Entry to get an object from its oid</summary>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Transaction.Cache.insertingObjects">
            <summary>To resolve cyclic reference, keep track of objects being inserted</summary>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Transaction.Cache.readingObjectInfo">
            <summary>To resolve cyclic reference, keep track of objects being read</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:NeoDatis.Odb.Impl.Core.Transaction.Cache.objectPositionsByIds" -->
        <member name="F:NeoDatis.Odb.Impl.Core.Transaction.Cache.unconnectedZoneOids">
            <summary>
            To keep track of the oid that have been created or modified in the
            current transaction
            </summary>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Transaction.Cache.objectInfoPointersCacheFromOid">
            <summary>
            Entry to get object info pointers (position,next object pos, previous
            object pos and class info pos) from the id
            </summary>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Transaction.Cache.AddObjectInfo(NeoDatis.Odb.Core.Layers.Layer2.Meta.ObjectInfoHeader)">
            <summary>Only adds the Object info - used for non committed objects</summary>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Transaction.Cache.GetObjectPositionByOid(NeoDatis.Odb.OID)">
            <summary>
            Returns the position or -1 if it is not is the cache or
            StorageEngineConstant.NULL_OBJECT_ID_ID if it has been marked as deleted
            </summary>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Transaction.CacheFactory.GetCrossSessionCache(System.String)">
            <summary>
            This factory method returns an implementation of
            <see cref="T:NeoDatis.Odb.Core.Transaction.ICrossSessionCache">NeoDatis.Odb.Core.Transaction.ICrossSessionCache
            	</see>
            to take over the objects across the sessions.
            </summary>
            <param name="identification">TODO</param>
            <returns>
            
            <see cref="T:NeoDatis.Odb.Core.Transaction.ICrossSessionCache">NeoDatis.Odb.Core.Transaction.ICrossSessionCache
            	</see>
            </returns>
        </member>
        <member name="T:NeoDatis.Odb.Impl.Core.Transaction.ClientSession">
            <summary>The client session when ODB is used in client server mode</summary>
            <author>olivier s</author>
        </member>
        <member name="T:NeoDatis.Odb.Impl.Core.Transaction.CrossSessionCache">
            <summary>A cache that survives the sessions.</summary>
            <remarks>A cache that survives the sessions. It is uses to automatically reconnect object to sessions
            	</remarks>
            <author>mayworm,olivier</author>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Transaction.CrossSessionCache.objects">
            <summary>The cache for NeoDatis OID.</summary>
            <remarks>
            The cache for NeoDatis OID. This cache supports a weak reference and it is
            sync
            </remarks>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Transaction.CrossSessionCache.deletedOids">
            <summary>
            When objects are deleted by oid, the cost is too high to search the object by the oid, so we just keep the deleted oid,
            and when looking for an object, check if the oid if is the deleted oids, if yes, return null and delete the object
            </summary>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Transaction.CrossSessionCache.instances">
            <summary>To keep track of all caches</summary>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Transaction.CrossSessionCache.#ctor">
            <summary>Protected constructor for factory-based construction</summary>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Transaction.CrossSessionCache.GetInstance(System.String)">
            <summary>Gets the unique instance for the cache for the identification</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:NeoDatis.Odb.Impl.Core.Transaction.DefaultTransaction" -->
        <member name="F:NeoDatis.Odb.Impl.Core.Transaction.DefaultTransaction.LogId">
            <summary>the log module name</summary>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Transaction.DefaultTransaction.isCommited">
            <summary>To indicate if transaction was confirmed = committed</summary>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Transaction.DefaultTransaction.creationDateTime">
            <summary>The transaction creation time</summary>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Transaction.DefaultTransaction.writeActions">
            <summary>
            All the pending writing that must be applied to actually commit the
            transaction
            </summary>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Transaction.DefaultTransaction.currentWriteAction">
            <summary>The same write action is reused for successive writes</summary>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Transaction.DefaultTransaction.currentWritePositionInWA">
            <summary>The position of the next write for WriteAction</summary>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Transaction.DefaultTransaction.hasAllWriteActionsInMemory">
            <summary>
            To indicate if all write actions are in memory - if not, transaction must
            read them from transaction file o commit the transaction
            </summary>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Transaction.DefaultTransaction.numberOfWriteActions">
            <summary>The number of write actions</summary>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Transaction.DefaultTransaction.fsi">
            <summary>A file interface to the transaction file - used to read/write the file</summary>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Transaction.DefaultTransaction.fsiToApplyWriteActions">
            <summary>A file interface to the engine main file</summary>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Transaction.DefaultTransaction.hasBeenPersisted">
            <summary>To indicate if transaction has already been persisted in file</summary>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Transaction.DefaultTransaction.archiveLog">
            <summary>
            When this flag is set,the transaction will not be deleted, but will be
            flagged as executed
            </summary>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Transaction.DefaultTransaction.wasRollbacked">
            <summary>To indicate if transaction was rollbacked</summary>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Transaction.DefaultTransaction.overrideTransactionName">
            <summary>A name to set the transaction file name.</summary>
            <remarks>
            A name to set the transaction file name. Used when reading transaction
            file
            </remarks>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Transaction.DefaultTransaction.readOnlyMode">
            <summary>To indicate if transaction is read only</summary>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Transaction.DefaultTransaction.session">
            <summary>The transaction session</summary>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Transaction.DefaultTransaction.isLocal">
            <summary>To indicate is transaction is used for local or remote engine</summary>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Transaction.DefaultTransaction.#ctor(NeoDatis.Odb.Core.Transaction.ISession)">
            <summary>The main constructor</summary>
            <param name="session">The transaction session</param>
            <exception cref="T:System.IO.IOException">System.IO.IOException</exception>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Transaction.DefaultTransaction.#ctor(NeoDatis.Odb.Core.Transaction.ISession,System.String)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Transaction.DefaultTransaction.Reset">
            <summary>Reset the transaction</summary>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Transaction.DefaultTransaction.AddWriteAction(NeoDatis.Odb.Core.Transaction.IWriteAction)">
            <summary>Adds a write action to the transaction</summary>
            <param name="writeAction">The write action to be added</param>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Transaction.DefaultTransaction.AddWriteAction(NeoDatis.Odb.Core.Transaction.IWriteAction,System.Boolean)">
            <summary>Adds a write action to the transaction</summary>
            <param name="writeAction">The write action to be added</param>
            <param name="persistWriteAcion">To indicate if write action must be persisted</param>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Transaction.DefaultTransaction.SetCommited(System.Boolean)">
            <summary>Mark te transaction file as committed</summary>
            <param name="isConfirmed"></param>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Transaction.DefaultTransaction.CommitMetaModel">
            <summary>
            Used to commit meta model : classes This is useful when running in client
            server mode TODO Check this
            </summary>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Transaction.DefaultTransaction.BuildClassInfoForCommit(NeoDatis.Odb.Core.Layers.Layer2.Meta.ClassInfo)">
            <summary>Shift all unconnected infos to connected (committed) infos</summary>
            <param name="classInfo"></param>
            <returns>The updated class info</returns>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Transaction.DefaultTransaction.Read(System.String)">
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:System.TypeLoadException"></exception>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Transaction.DefaultTransaction.LoadWriteActionsBackwards(System.String,System.Boolean)">
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:System.TypeLoadException"></exception>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Transaction.DefaultTransaction.Delete">
            <summary>deletes the transaction file</summary>
            <exception cref="T:System.IO.IOException">System.IO.IOException</exception>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Transaction.DefaultTransaction.GetNumberOfWriteActions">
            <returns>Returns the numberOfWriteActions.</returns>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Transaction.DefaultTransaction.GetFsi">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Core.Transaction.DefaultTransaction.SetWritePosition(System.Int64)">
            <summary>Set the write position (position in main database file).</summary>
            <remarks>
            Set the write position (position in main database file). This is used to
            know if the next write can be appended to the previous one (in the same
            current Write Action) or not.
            </remarks>
            <param name="position"></param>
        </member>
        <member name="T:NeoDatis.Odb.Impl.Core.Transaction.DefaultWriteAction">
            <summary>The WriteAction class is the description of a Write operation that will be applied to the main database file when committing.
            	</summary>
            <remarks>
            The WriteAction class is the description of a Write operation that will be applied to the main database file when committing.
            All operations(writes) that can not be written to the database file before committing , pointers (for example) are stored in WriteAction
            objects. The transaction keeps track of all these WriteActions. When committing, the transaction apply each WriteAction to the engine database file.
            </remarks>
            <author>osmadja</author>
        </member>
        <member name="T:NeoDatis.Odb.Impl.Core.Transaction.ServerCache">
            <summary>A specific cache for the server in Client/Server mode</summary>
            <author>osmadja</author>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Transaction.ServerCache.oidsOfNNoi">
            <summary>Object id of NonNativeObjectInfo</summary>
            <TODO>check why we need this, there is no getter for it =&gt; we don't use it</TODO>
        </member>
        <member name="T:NeoDatis.Odb.Impl.Core.Transaction.TmpCache">
            <summary>A temporary cache of objects.</summary>
            <remarks>A temporary cache of objects.</remarks>
            <author>olivier s</author>
        </member>
        <member name="F:NeoDatis.Odb.Impl.Core.Transaction.TmpCache.readingObjectInfo">
            <summary>To resolve cyclic reference, keep track of objects being read</summary>
        </member>
        <member name="T:NeoDatis.Odb.Impl.DefaultCoreProvider">
            <summary>The is the default implementation of ODB</summary>
            <author>olivier</author>
        </member>
        <member name="M:NeoDatis.Odb.Impl.DefaultCoreProvider.GetIO(System.String,NeoDatis.Odb.Core.Layers.Layer3.IBaseIdentification,System.Int32)">
            <summary>
            TODO Return a list of IO to enable replication or other IO mechanism Used
            by the FileSystemInterface to actual write/read byte to underlying
            storage
            </summary>
            <param name="name">The name of the buffered io</param>
            <param name="parameters">The parameters that define the buffer</param>
            <param name="bufferSize">The size of the buffers</param>
            <returns>The buffer implementation @</returns>
        </member>
        <member name="M:NeoDatis.Odb.Impl.DefaultCoreProvider.GetLocalInstanceBuilder(NeoDatis.Odb.Core.Layers.Layer3.IStorageEngine)">
            <summary>Returns the Local Instance Builder</summary>
        </member>
        <member name="M:NeoDatis.Odb.Impl.DefaultCoreProvider.GetServerInstanceBuilder(NeoDatis.Odb.Core.Layers.Layer3.IStorageEngine)">
            <summary>Returns the Server Instance Builder</summary>
        </member>
        <member name="M:NeoDatis.Odb.Impl.DefaultCoreProvider.GetMessageStreamer(System.Net.Sockets.TcpClient)">
            <summary>(non-Javadoc)</summary>
            <seealso cref="M:NeoDatis.Odb.Core.ICoreProvider.GetMessageStreamer(System.Net.Sockets.TcpClient)">NeoDatis.Odb.Core.ICoreProvider.GetMessageStreamer
            	</seealso>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Main.DefaultClassRepresentation.RebuildIndex(System.String,System.Boolean)">
            <summary>Used to rebuild an index</summary>
        </member>
        <member name="T:NeoDatis.Odb.Impl.Main.LocalODB">
            <summary>The Local ODB implementation.</summary>
            <remarks>The Local ODB implementation.</remarks>
            <author>osmadja</author>
        </member>
        <member name="T:NeoDatis.Odb.Impl.Main.ODBAdapter">
            <summary>A basic adapter for ODB interface</summary>
            <author>osmadja</author>
        </member>
        <member name="T:NeoDatis.Odb.ODB">
            <summary>The main ODB public interface: It is what the user sees.</summary>
            <remarks>The main ODB public interface: It is what the user sees.</remarks>
            <author>osmadja</author>
        </member>
        <member name="M:NeoDatis.Odb.ODB.Commit">
            <summary>Commit all the change of the database @</summary>
        </member>
        <member name="M:NeoDatis.Odb.ODB.Rollback">
            <summary>Undo all uncommitted changes</summary>
        </member>
        <member name="M:NeoDatis.Odb.ODB.Close">
            <summary>Closes the database.</summary>
            <remarks>Closes the database. Automatically commit uncommitted changes</remarks>
        </member>
        <member name="M:NeoDatis.Odb.ODB.Store(System.Object)">
            <summary>Store a plain java Object in the ODB Database</summary>
            <param name="@object">A plain Java Object</param>
        </member>
        <member name="M:NeoDatis.Odb.ODB.GetObjects``1">
            <summary>Get all objects of a specific type</summary>
            <param name="clazz">The type of the objects</param>
            <returns>The list of objects</returns>
        </member>
        <member name="M:NeoDatis.Odb.ODB.GetObjects``1(System.Boolean)">
            <summary>Get all objects of a specific type</summary>
            <param name="clazz">The type of the objects</param>
            <param name="inMemory">if true, preload all objects,if false,load on demand</param>
            <returns>The list of objects</returns>
        </member>
        <member name="M:NeoDatis.Odb.ODB.GetObjects``1(System.Boolean,System.Int32,System.Int32)">
            <param name="clazz">The type of the objects</param>
            <param name="inMemory">if true, preload all objects,if false,load on demand</param>
            <param name="startIndex">The index of the first object</param>
            <param name="endIndex">The index of the last object that must be returned</param>
            <returns>A List of objects</returns>
        </member>
        <member name="M:NeoDatis.Odb.ODB.Delete(System.Object)">
            <summary>Delete an object from database</summary>
            <param name="@object"></param>
        </member>
        <member name="M:NeoDatis.Odb.ODB.DeleteObjectWithId(NeoDatis.Odb.OID)">
            <summary>Delete an object from the database with the id</summary>
            <param name="oid">The object id to be deleted</param>
        </member>
        <member name="M:NeoDatis.Odb.ODB.GetValues(NeoDatis.Odb.Core.Query.IValuesQuery)">
            <summary>Search for objects that matches the query.</summary>
            <remarks>Search for objects that matches the query.</remarks>
            <param name="query"></param>
            <returns>The list of values</returns>
        </member>
        <member name="M:NeoDatis.Odb.ODB.GetObjects``1(NeoDatis.Odb.Core.Query.IQuery)">
            <summary>Search for objects that matches the query.</summary>
            <remarks>Search for objects that matches the query.</remarks>
            <param name="query"></param>
            <returns>The list of objects</returns>
        </member>
        <member name="M:NeoDatis.Odb.ODB.GetObjects``1(NeoDatis.Odb.Core.Query.IQuery,System.Boolean)">
            <summary>Search for objects that matches the native query.</summary>
            <remarks>Search for objects that matches the native query.</remarks>
            <param name="query"></param>
            <param name="inMemory"></param>
            <returns>The list of objects</returns>
        </member>
        <member name="M:NeoDatis.Odb.ODB.GetObjects``1(NeoDatis.Odb.Core.Query.IQuery,System.Boolean,System.Int32,System.Int32)">
            <summary>Return a list of objects that matches the query</summary>
            <param name="query"></param>
            <param name="inMemory">if true, preload all objects,if false,load on demand</param>
            <param name="startIndex">The index of the first object</param>
            <param name="endIndex">The index of the last object that must be returned</param>
            <returns>
            A List of objects, if start index and end index are -1, they are
            ignored. If not, the length of the sublist is endIndex -
            startIndex
            </returns>
        </member>
        <member name="M:NeoDatis.Odb.ODB.Count(NeoDatis.Odb.Impl.Core.Query.Criteria.CriteriaQuery)">
            <summary>Returns the number of objects that satisfy the query</summary>
            <param name="query"></param>
            <returns>The number of objects that satisfy the query</returns>
        </member>
        <member name="M:NeoDatis.Odb.ODB.GetObjectId(System.Object)">
            <summary>Get the id of an ODB-aware object</summary>
            <param name="@object"></param>
            <returns>The ODB internal object id</returns>
        </member>
        <member name="M:NeoDatis.Odb.ODB.GetObjectFromId(NeoDatis.Odb.OID)">
            <summary>Get the object with a specific id</summary>
            <param name="id"></param>
            <returns>The object with the specific id @</returns>
        </member>
        <member name="M:NeoDatis.Odb.ODB.DefragmentTo(System.String)">
            <summary>Defragment ODB Database</summary>
            <param name="newFileName"></param>
        </member>
        <member name="M:NeoDatis.Odb.ODB.GetClassRepresentation(System.Type)">
            <summary>Get an abstract representation of a class</summary>
            <param name="clazz"></param>
            <returns>a public meta-representation of a class</returns>
        </member>
        <member name="M:NeoDatis.Odb.ODB.GetClassRepresentation(System.String)">
            <summary>Get an abstract representation of a class</summary>
            <param name="fullClassName"></param>
            <returns>a public meta-representation of a class</returns>
        </member>
        <member name="M:NeoDatis.Odb.ODB.AddUpdateTrigger(System.Type,NeoDatis.Odb.Core.Trigger.UpdateTrigger)">
            <summary>Used to add an update trigger callback for the specific class</summary>
            <param name="trigger"></param>
        </member>
        <member name="M:NeoDatis.Odb.ODB.AddInsertTrigger(System.Type,NeoDatis.Odb.Core.Trigger.InsertTrigger)">
            <summary>Used to add an insert trigger callback for the specific class</summary>
            <param name="trigger"></param>
        </member>
        <member name="M:NeoDatis.Odb.ODB.AddDeleteTrigger(System.Type,NeoDatis.Odb.Core.Trigger.DeleteTrigger)">
            <summary>USed to add a delete trigger callback for the specific class</summary>
            <param name="trigger"></param>
        </member>
        <member name="M:NeoDatis.Odb.ODB.AddSelectTrigger(System.Type,NeoDatis.Odb.Core.Trigger.SelectTrigger)">
            <summary>Used to add a select trigger callback for the specific class</summary>
            <param name="trigger"></param>
        </member>
        <member name="M:NeoDatis.Odb.ODB.GetRefactorManager">
            <summary>Returns the object used to refactor the database</summary>
        </member>
        <member name="M:NeoDatis.Odb.ODB.Ext">
            <summary>Get the extension of ODB to get access to advanced functions</summary>
        </member>
        <member name="M:NeoDatis.Odb.ODB.Disconnect(System.Object)">
            <summary>Used to disconnect the object from the current session.</summary>
            <remarks>
            Used to disconnect the object from the current session. The object is
            removed from the cache
            </remarks>
        </member>
        <member name="M:NeoDatis.Odb.ODB.IsClosed">
            <returns></returns>
        </member>
        <member name="M:NeoDatis.Odb.ODB.GetName">
            <summary>Return the name of the database</summary>
            <returns>the file name in local mode and the base id (alias) in client server mode.
            	</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:NeoDatis.Odb.Impl.Main.ODBAdapter.DeleteObjectWithId(NeoDatis.Odb.OID)" -->
        <member name="M:NeoDatis.Odb.Impl.Main.ODBAdapter.Run">
            <summary>or shutdown hook</summary>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Main.LocalODB.#ctor(System.String,System.String,System.String)">
            <summary>protected Constructor with user and password</summary>
            <param name="fileName"></param>
            <param name="user"></param>
            <param name="password"></param>
            <exception cref="T:System.Exception">System.Exception</exception>
        </member>
        <member name="T:NeoDatis.Odb.ODBExt">
            <summary>An interface to provider extended access to ODB.</summary>
            <remarks>An interface to provider extended access to ODB.</remarks>
            <author>osmadja</author>
        </member>
        <member name="M:NeoDatis.Odb.ODBExt.GetObjectExternalOID(System.Object)">
            <summary>Gets the external OID of an Object.</summary>
            <remarks>
            Gets the external OID of an Object. The external OID contains the ID of
            the database + the oid of the object. The External OID can be used to
            identify objects outside the ODB database as it should be unique across
            databases. It can be used for example to implement a replication process.
            </remarks>
            <param name="@object"></param>
            <returns></returns>
        </member>
        <member name="M:NeoDatis.Odb.ODBExt.GetDatabaseId">
            <summary>Get the Database ID</summary>
            <returns></returns>
        </member>
        <member name="M:NeoDatis.Odb.ODBExt.ConvertToExternalOID(NeoDatis.Odb.OID)">
            <summary>Convert an OID to External OID</summary>
            <param name="oid"></param>
            <returns>The external OID</returns>
        </member>
        <member name="M:NeoDatis.Odb.ODBExt.GetCurrentTransactionId">
            <summary>Gets the current transaction Id</summary>
            <returns>The current transaction Id</returns>
        </member>
        <member name="M:NeoDatis.Odb.ODBExt.GetObjectVersion(NeoDatis.Odb.OID)">
            <summary>Returns the object version of the object that has the specified OID</summary>
        </member>
        <member name="M:NeoDatis.Odb.ODBExt.GetObjectCreationDate(NeoDatis.Odb.OID)">
            <summary>Returns the object creation date in ms since 1/1/1970</summary>
            <param name="oid"></param>
            <returns>The creation date</returns>
        </member>
        <member name="M:NeoDatis.Odb.ODBExt.GetObjectUpdateDate(NeoDatis.Odb.OID)">
            <summary>Returns the object last update date in ms since 1/1/1970</summary>
            <param name="oid"></param>
            <returns>The last update date</returns>
        </member>
        <member name="T:NeoDatis.Odb.Impl.Main.RemoteODBClient">
            <summary>The client implementation of ODB.</summary>
            <remarks>The client implementation of ODB.</remarks>
            <author>osmadja</author>
        </member>
        <member name="T:NeoDatis.Odb.Impl.Main.SameVMODBClient">
            <summary>The client implementation of ODB.</summary>
            <remarks>The client implementation of ODB.</remarks>
            <author>osmadja</author>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Main.SameVMODBClient.#ctor(NeoDatis.Odb.Core.Server.Layers.Layer3.IODBServerExt,System.String)">
            <summary>TODO set the constructor as protected</summary>
        </member>
        <member name="T:NeoDatis.Odb.Impl.Tool.Cryptographer">
             A simple cypher. Used to cypher password of the NeoDatis ODB Database.
             @author osmadja
            
        </member>
        <member name="T:NeoDatis.Odb.Impl.Tool.LogUtil">
            <summary>To manage logging level</summary>
            <author>osmadja</author>
        </member>
        <member name="T:NeoDatis.Odb.Impl.Tool.ObjectTool">
            <summary>Basic native Object formatter.</summary>
            <remarks>Basic native Object formatter. Used in ODBExplorer and XML import/export.
            	</remarks>
            <author>osmadja</author>
        </member>
        <!-- Badly formed XML comment ignored for member "M:NeoDatis.Odb.Impl.Tool.ObjectTool.StringToObject(System.Int32,System.String,System.Int32)" -->
        <member name="M:NeoDatis.Odb.Impl.Tool.ObjectTool.StringToObjectInfo(System.Int32,System.String,System.Int32,NeoDatis.Odb.Core.Layers.Layer2.Meta.ClassInfo)">
            <param name="odbTypeId">The native object type</param>
            <param name="value">The real value</param>
            <param name="caller">
            The caller type , can be one of the constants
            ObjectTool.CALLER_IS_
            </param>
            <param name="ci">
            The ClassInfo. It is only used for enum where we need the enum
            class info. In other cases, it is null
            </param>
            <returns>The NativeObjectInfo that represents the specific value</returns>
            <exception cref="!:Java.Lang.NumberFormatException">Java.Lang.NumberFormatException
            	</exception>
            <exception cref="!:Java.Text.ParseException">Java.Text.ParseException</exception>
        </member>
        <member name="T:NeoDatis.Odb.Impl.Tool.UUID">
            <summary>Unique ID generator</summary>
            <author>osmadja</author>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Tool.UUID.GetBlockMarker(System.Int64)">
            <summary>Returns a block marker , 5 longs</summary>
            <param name="position"></param>
            <returns>A 4 long array</returns>
        </member>
        <member name="M:NeoDatis.Odb.Impl.Tool.UUID.GetDatabaseId(System.Int64)">
            <summary>Returns a database id : 4 longs</summary>
            <param name="creationDate"></param>
            <returns>a 4 long array</returns>
        </member>
        <member name="T:NeoDatis.Odb.ODBAuthenticationRuntimeException">
            <summary>The exception thrown when the user/password is wrong</summary>
            <author>osmadja</author>
        </member>
        <member name="T:NeoDatis.Odb.OdbConfiguration">
            <summary>The main NeoDatis ODB Configuration class.</summary>
            <remarks>
            The main NeoDatis ODB Configuration class. All engine configuration is done
            via this class.
            </remarks>
            <author>osmadja</author>
        </member>
        <member name="F:NeoDatis.Odb.OdbConfiguration.idBlockSize">
            <summary>header(34) + 1000 * 18</summary>
        </member>
        <member name="F:NeoDatis.Odb.OdbConfiguration.enableEmptyConstructorCreation">
            <summary>
            A boolean value to indicate if ODB can create empty constructor when not
            available
            </summary>
        </member>
        <member name="F:NeoDatis.Odb.OdbConfiguration.retryIfFileIsLocked">
            <summary>
            a boolean value to specify if ODBFactory waits a little to re-open a file
            when a file is locked
            </summary>
        </member>
        <member name="F:NeoDatis.Odb.OdbConfiguration.numberOfRetryToOpenFile">
            <summary>How many times ODBFactory tries to open the file when it is locked</summary>
        </member>
        <member name="F:NeoDatis.Odb.OdbConfiguration.retryTimeout">
            <summary>How much time (in ms) ODBFactory waits between each retry</summary>
        </member>
        <member name="F:NeoDatis.Odb.OdbConfiguration.defaultFileCreationTime">
            <summary>How much time (in ms) ODBFactory waits to be sure a file has been created
            	</summary>
        </member>
        <member name="F:NeoDatis.Odb.OdbConfiguration.automaticallyIncreaseCacheSize">
            <summary>Automatically increase cache size when it is full</summary>
        </member>
        <member name="F:NeoDatis.Odb.OdbConfiguration.defaultIndexBTreeDegree">
            <summary>The default btree size for index btrees</summary>
        </member>
        <member name="F:NeoDatis.Odb.OdbConfiguration.useLazyCache">
            <summary>The type of cache.</summary>
            <remarks>
            The type of cache. If true, the cache use weak references that allows
            very big inserts,selects like a million of objects. But it is a little
            bit slower than setting to false
            </remarks>
        </member>
        <member name="F:NeoDatis.Odb.OdbConfiguration.displayWarnings">
            <summary>To indicate if warning must be displayed</summary>
        </member>
        <member name="F:NeoDatis.Odb.OdbConfiguration.scaleForAverageDivision">
            <summary>Scale used for average action *</summary>
        </member>
        <member name="F:NeoDatis.Odb.OdbConfiguration.roundTypeForAverageDivision">
            <summary>Round Type used for the average division</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:NeoDatis.Odb.OdbConfiguration.ioClass" -->
        <member name="F:NeoDatis.Odb.OdbConfiguration.encryptionPassword">
            <summary>for IO atomic : password for encryption</summary>
        </member>
        <member name="F:NeoDatis.Odb.OdbConfiguration.coreProvider">
            <summary>The core provider is the provider of core object implementation for ODB</summary>
        </member>
        <member name="F:NeoDatis.Odb.OdbConfiguration.checkRuntimeVersion">
            <summary>To indicate if NeoDatis must check the runtime version, defaults to yes</summary>
        </member>
        <member name="F:NeoDatis.Odb.OdbConfiguration.reconnectObjectsToSession">
            <summary>
            To specify if NeoDatis must automatically reconnect objects loaded in previous
            session.
            </summary>
            <remarks>
            To specify if NeoDatis must automatically reconnect objects loaded in previous
            session. With with flag on, user does not need to manually reconnect an
            object. Default value = true
            </remarks>
        </member>
        <member name="F:NeoDatis.Odb.OdbConfiguration.useIndex">
            <summary>To activate or desactivate the use of index</summary>
        </member>
        <member name="M:NeoDatis.Odb.OdbConfiguration.ReconnectObjectsToSession">
            <returns></returns>
        </member>
        <member name="M:NeoDatis.Odb.OdbConfiguration.GetStringSpaceReserveFactor">
            <returns>Returns the stringSpaceReserveFactor.</returns>
        </member>
        <member name="M:NeoDatis.Odb.OdbConfiguration.SetStringSpaceReserveFactor(System.Int32)">
            <param name="stringSpaceReserveFactor">The stringSpaceReserveFactor to set.</param>
        </member>
        <member name="M:NeoDatis.Odb.OdbConfiguration.GetDebugLevel">
            <returns>Returns the debugLevel.</returns>
        </member>
        <member name="M:NeoDatis.Odb.OdbConfiguration.SetDebugLevel(System.Int32)">
            <param name="debugLevel">The debugLevel to set.</param>
        </member>
        <member name="M:NeoDatis.Odb.OdbConfiguration.GetQueryExecutorCallback">
            <returns>the queryExecutorCallback</returns>
        </member>
        <member name="M:NeoDatis.Odb.OdbConfiguration.SetQueryExecutorCallback(NeoDatis.Odb.Core.Query.Execution.IQueryExecutorCallback)">
            <param name="queryExecutorCallback">the queryExecutorCallback to set</param>
        </member>
        <member name="M:NeoDatis.Odb.OdbConfiguration.IsUseCache">
            <returns>the useCache</returns>
        </member>
        <member name="M:NeoDatis.Odb.OdbConfiguration.SetUseCache(System.Boolean)">
            <param name="useCache">the useCache to set</param>
        </member>
        <member name="M:NeoDatis.Odb.OdbConfiguration.SetDatabaseCharacterEncoding(System.String)">
            <exception cref="!:Java.IO.UnsupportedEncodingException"></exception>
        </member>
        <member name="M:NeoDatis.Odb.OdbConfiguration.SetLatinDatabaseCharacterEncoding">
            <exception cref="!:Java.IO.UnsupportedEncodingException"></exception>
        </member>
        <member name="M:NeoDatis.Odb.OdbConfiguration.GetMessageStreamerClass">
            <returns></returns>
        </member>
        <member name="T:NeoDatis.Odb.ODBFactory">
            <summary>The ODBFactory to obtain the right ODB implementation.</summary>
            <remarks>The ODBFactory to obtain the right ODB implementation.</remarks>
            <author>osmadja</author>
        </member>
        <member name="M:NeoDatis.Odb.ODBFactory.#ctor">
            <summary>A private constructor to avoid instantiation</summary>
        </member>
        <member name="M:NeoDatis.Odb.ODBFactory.Open(System.String,System.String,System.String)">
            <summary>Open an ODB database protected by a user and password</summary>
            <param name="fileName">The name of the ODB database</param>
            <param name="user">The user of the database</param>
            <param name="password">The password of the user</param>
            <returns>The ODB database</returns>
        </member>
        <member name="M:NeoDatis.Odb.ODBFactory.Open(System.String)">
            <summary>Open a non password protected ODB database</summary>
            <param name="fileName">The ODB database name</param>
            <returns>A local ODB implementation</returns>
        </member>
        <member name="M:NeoDatis.Odb.ODBFactory.OpenServer(System.Int32)">
            <summary>Open an ODB server on the specific port.</summary>
            <remarks>
            Open an ODB server on the specific port. This will the socketServer on
            the specified port. Must call startServer of the ODBServer to actually
            start the server
            </remarks>
            <param name="port">The server port</param>
            <returns>The server</returns>
        </member>
        <member name="M:NeoDatis.Odb.ODBFactory.OpenClient(System.String,System.Int32,System.String)">
            <summary>Open an ODB Client</summary>
            <param name="hostName"></param>
            <param name="port"></param>
            <param name="baseIdentifier">
            The base identifier : The alias used by the server to declare
            database
            </param>
            <returns>The ODB</returns>
        </member>
        <member name="M:NeoDatis.Odb.ODBFactory.OpenClient(System.String,System.Int32,System.String,System.String,System.String)">
            <param name="hostName"></param>
            <param name="port"></param>
            <param name="baseIdentifier">
            The base identifier : The alias used by the server to declare
            database
            </param>
            <param name="user">Remote access user</param>
            <param name="password">Remote access password</param>
            <returns>The ODB</returns>
        </member>
        <member name="T:NeoDatis.Odb.OIDTypes">
            <author>olivier</author>
        </member>
        <member name="T:NeoDatis.Odb.Tool.ObjectInfoHeaderListDisplay">
            <summary>
            An utility class to build a string description from a list of
            ObjectInfoHeader
            </summary>
            <author>osmadja</author>
        </member>
    </members>
</doc>
